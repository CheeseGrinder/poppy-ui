/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionGroupChangeEventDetail } from "./components/accordion-group/accordion-group.type";
import { BadgeAs, BadgeColor } from "./components/badge/badge.type";
import { AutoCapitalize, Color, ComponentProps, ComponentRef, EnterKeyHint, KeyboardType, Size } from "./interface.d";
import { ButtonColor, ButtonExpand, ButtonShape, ButtonType } from "./components/button/button.type";
import { CheckboxChangeEventDetail, CheckboxPlacement } from "./components/checkbox/checkbox.type";
import { DividerColor, DividerOrientation, DividerPlacement } from "./components/divider/divider.type";
import { TriggerAction } from "./utils/trigger";
import { DrawerSide } from "./components/drawer/drawer.type";
import { DropdownAlign, DropdownSide } from "./components/dropdown/dropdown.type";
import { IndicatorPosition, IndicatorSide } from "./components/indicator/indicator.type";
import { Autocomplete, InputChangeEventDetail, InputColor, InputInputEventDetail, InputType } from "./components/input/input.type";
import { InputFileChangeEventDetail, InputFileColor } from "./components/input-file/input-file.type";
import { JoinOrientation } from "./components/join/join.type";
import { ListOrientation } from "./components/list/list.type";
import { LoadingType } from "./components/loading/loading.type";
import { MaskType } from "./components/mask/mask.type";
import { RadioGroupChangeEventDetail, RadioGroupCompareFn } from "./components/radio-group/radio-group.type";
import { RangeChangeEventDetail, RangeColor } from "./components/range/range.type";
import { SelectChangeEventDetail, SelectColor, SelectCompareFn } from "./components/select/select.type";
import { SelectPopoverOption } from "./components/select-popover/select-popover.type";
import { SwapChangeEventDetail, SwapType } from "./components/swap/swap.type";
import { TextareaChangeEventDetail, TextareaColor, TextareaInputEventDetail, Wrap } from "./components/textarea/textarea.type";
import { ToggleChangeEventDetail, ToggleColor } from "./components/toggle/toggle.type";
import { TooltipPosition } from "./components/tooltip/tooltip.type";
export { AccordionGroupChangeEventDetail } from "./components/accordion-group/accordion-group.type";
export { BadgeAs, BadgeColor } from "./components/badge/badge.type";
export { AutoCapitalize, Color, ComponentProps, ComponentRef, EnterKeyHint, KeyboardType, Size } from "./interface.d";
export { ButtonColor, ButtonExpand, ButtonShape, ButtonType } from "./components/button/button.type";
export { CheckboxChangeEventDetail, CheckboxPlacement } from "./components/checkbox/checkbox.type";
export { DividerColor, DividerOrientation, DividerPlacement } from "./components/divider/divider.type";
export { TriggerAction } from "./utils/trigger";
export { DrawerSide } from "./components/drawer/drawer.type";
export { DropdownAlign, DropdownSide } from "./components/dropdown/dropdown.type";
export { IndicatorPosition, IndicatorSide } from "./components/indicator/indicator.type";
export { Autocomplete, InputChangeEventDetail, InputColor, InputInputEventDetail, InputType } from "./components/input/input.type";
export { InputFileChangeEventDetail, InputFileColor } from "./components/input-file/input-file.type";
export { JoinOrientation } from "./components/join/join.type";
export { ListOrientation } from "./components/list/list.type";
export { LoadingType } from "./components/loading/loading.type";
export { MaskType } from "./components/mask/mask.type";
export { RadioGroupChangeEventDetail, RadioGroupCompareFn } from "./components/radio-group/radio-group.type";
export { RangeChangeEventDetail, RangeColor } from "./components/range/range.type";
export { SelectChangeEventDetail, SelectColor, SelectCompareFn } from "./components/select/select.type";
export { SelectPopoverOption } from "./components/select-popover/select-popover.type";
export { SwapChangeEventDetail, SwapType } from "./components/swap/swap.type";
export { TextareaChangeEventDetail, TextareaColor, TextareaInputEventDetail, Wrap } from "./components/textarea/textarea.type";
export { ToggleChangeEventDetail, ToggleColor } from "./components/toggle/toggle.type";
export { TooltipPosition } from "./components/tooltip/tooltip.type";
export namespace Components {
    /**
     * Accordion is used for showing and hiding content.
     */
    interface PopAccordion {
        /**
          * If `true`, the user cannot interact with the element.
         */
        "disabled"?: boolean;
        /**
          * Close the accordion. If the method returns `false`, the accordion was already closed. otherwise it returns `true`
         */
        "hide": () => Promise<boolean>;
        /**
          * name of the accordion
         */
        "name": string;
        /**
          * If `true`, the accordion is open.  The developer must not set this value to `true` if the accordion is used in `<accordion-group>` element and set the active property to the name of the accordion.
         */
        "open"?: boolean;
        /**
          * If `true`, the user cannot interact with the element.
         */
        "readonly"?: boolean;
        /**
          * Open the accordion. If the method returns `false`, the accordion was already open. otherwise it returns `true`
         */
        "show": () => Promise<boolean>;
        /**
          * Open or close the accordion depending on his actual state
         */
        "toggle": () => Promise<void>;
    }
    interface PopAccordionGroup {
        /**
          * name of the active the accordion.
         */
        "active"?: string | string[];
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * If `true`, the user can open multiple accordion.
          * @config 
          * @default false
         */
        "multiple": boolean;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
    }
    /**
     * Avatars are used to show a thumbnail representation of an individual or business in the interface.
     */
    interface PopAvatar {
        /**
          * To show some letters as avatar placeholder
          * @config 
          * @default false
         */
        "placeholder": boolean;
    }
    /**
     * Badges are used to inform the user of the status of specific data.
     */
    interface PopBadge {
        /**
          * Used HTML element for
          * @config 
          * @default "div"
         */
        "as"?: BadgeAs;
        /**
          * The color to use from your application's color palette. Default options are: `"neutral"`, `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: BadgeColor;
        /**
          * Transparent Badge with colored border
          * @config 
          * @default false
         */
        "outlined"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
    }
    /**
     * Buttons allow the user to take actions or make choices.
     */
    interface PopButton {
        /**
          * The color to use from your application's color palette. Default options are: `"neutral"`, `"ghost"`, `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: ButtonColor;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * `wide` Add more horizontal padding `block` make a full width button
          * @config
         */
        "expand"?: ButtonExpand;
        /**
          * The HTML form element id. Used to submit a form when the button is not a child of the form.
         */
        "form"?: string | HTMLFormElement;
        /**
          * Transparent Button with colored border
          * @config 
          * @default false
         */
        "outlined"?: boolean;
        /**
          * `square` set button width and heigth with 1:1 ratio `round` set button width and heigth with 1:1 ratio and rounded corners.
          * @config
         */
        "shape"?: ButtonShape;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The type of the button.
         */
        "type"?: ButtonType;
    }
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface PopCard {
        /**
          * Applies smaller padding
          * @config 
          * @default false
         */
        "compact": boolean;
    }
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface PopCardActions {
    }
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface PopCardBody {
    }
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface PopCardTitle {
    }
    /**
     * Toggles are switches that change the state of a single option.
     * They can be switched on or off by pressing.
     * Toggles can also be `"checked"` programmatically by setting the checked property.
     */
    interface PopCheckbox {
        /**
          * If `true`, the toggle is selected.
          * @config 
          * @default false
         */
        "checked"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: Color;
        /**
          * If true, the user cannot interact with the native element.
          * @config 
          * @default false
         */
        "disabled": boolean;
        /**
          * If a developer want to use `indeterminate`, `checked` property should be set to `false`
          * @config 
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Where to place the label relative to the checkbox. - `"start"`: The label will appear to the left of the checkbox in LTR and to the right in RTL. - `"end"`: The label will appear to the right of the checkbox in LTR and to the left in RTL.
          * @config 
          * @default "start"
         */
        "placement"?: CheckboxPlacement;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Sets focus on the native `input` in `pop-checkbox`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | null;
    }
    /**
     * Divider will be used to separate content vertically or horizontally.
     */
    interface PopDivider {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"neutral"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color": DividerColor;
        /**
          * Define content disposition orientation
          * @config 
          * @default "horizontal"
         */
        "orientation": DividerOrientation;
        /**
          * Where to place the content. - `"left"`: The content will appear to the left of the divider in LTR and RTL. - `"start"`: The content will appear to the left of the divider in LTR and to the right in RTL. - `"center"`: The content will appear to the center of the divider. - `"end"`: The content will appear to the right of the divider in LTR and to the left in RTL. - `"right"`: The content will appear to the right of the divider in LTR and RTL.
          * @config 
          * @default "center"
         */
        "placement": DividerPlacement;
    }
    /**
     * Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page.
     */
    interface PopDrawer {
        "dismiss": () => Promise<boolean>;
        /**
          * Forces the drawer to be open
          * @config 
          * @default false
         */
        "open"?: boolean;
        "present": () => Promise<boolean>;
        /**
          * Where to place the sidebar relative to the screen. - `"start"`: The sidebar will appear to the left of the screen in LTR and to the right in RTL. - `"end"`: The sidebar will appear to the right of the screen in LTR and to the left in RTL.
          * @config 
          * @default "start"
         */
        "side"?: DrawerSide;
        "toggle": () => Promise<void>;
        /**
          * An ID corresponding to the trigger element that causes the drawer to open. Use the `trigger-action` property to customize the interaction that results in the sidebar opening.
         */
        "trigger"?: string;
        /**
          * Describes what kind of interaction with the trigger that should cause the sidebar to open. Does not apply when the `trigger` property is `undefined`. - `"click"`: the sidebar will be presented when the trigger is left clicked. - `"hover"`: the sidebar will be presented when a pointer hovers over the trigger. - `"context-menu"`: the sidebar will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
          * @config 
          * @default "click"
         */
        "triggerAction"?: TriggerAction;
    }
    /**
     * Describe whats does the component
     */
    interface PopDropdown {
        /**
          * Describes how the dropdown has to be alined - "start": Align to the left in LTR and to the right in RTL. - "end": Align to the right in LTR and to the left in RTL.
          * @config 
          * @default "start"
         */
        "align"?: DropdownAlign;
        /**
          * Set the amount of time, in milliseconds after the user no longer hover the trigger or dropdown, will dismiss. Only apply on `triggerAction=hover`
          * @config 
          * @default 100
         */
        "debounce"?: number;
        "dismiss": () => Promise<boolean>;
        /**
          * Force the dropdown to be shown
          * @config 
          * @default false
         */
        "open"?: boolean;
        "present": () => Promise<boolean>;
        /**
          * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented.
          * @config 
          * @default false
         */
        "showBackdrop"?: boolean;
        /**
          * @config 
          * @default "bottom"
         */
        "side"?: DropdownSide;
        /**
          * Describes what kind of intertion with the trigger (sloted element) that should cause the dropdown to open. - `"click"`: the dropdown will be presented when the trigger is left clicked. - `"hover"`: the dropdown will be presented when a pointer hovers over the trigger. - `"context-menu"`: the dropdown will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
          * @config 
          * @default "click"
         */
        "triggerAction": TriggerAction;
    }
    interface PopImg {
        /**
          * This attribute defines the alternative text describing the image. Users will see this text displayed if the image URL is wrong, the image is not in one of the supported formats, or if the image is not yet downloaded.
         */
        "alt"?: string;
        /**
          * The image URL. This attribute is mandatory for the `<img>` element.
         */
        "src": string;
    }
    /**
     * Indicators are used to place an element on the corner of another element.
     */
    interface PopIndicator {
        /**
          * Align vertically the indicator.
          * @config 
          * @default "top"
         */
        "position"?: IndicatorPosition;
        /**
          * Align horizontally the indicator.
          * @config 
          * @default "left"
         */
        "side"?: IndicatorSide;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface PopInput {
        /**
          * This features work only on mobile and tablet devices. By default the User Agent and input make their own determination.  - `off` or `none`: No autocapitalization is applied (all letters default to lowercase) - `on` or `sentences`: The first letter of each sentence defaults to a capital letter; all other letters default to lowercase - `words`: The first letter of each word defaults to a capital letter; all other letters default to lowercase - `characters`: All letters should default to uppercase
          * @config 
          * @default "off"
         */
        "autoCapitalize"?: AutoCapitalize;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autoComplete"?: Autocomplete;
        /**
          * If `true`, the element will be focused on page load.
          * @config 
          * @default false
         */
        "autoFocus"?: boolean;
        /**
          * if `true`, adds border to textarea when `color` property is not set.
          * @config 
          * @default false
         */
        "bordered"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: InputColor;
        /**
          * If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.
          * @config 
          * @default false
         */
        "counter"?: boolean;
        /**
          * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
          * @config
         */
        "counterFormatter"?: (inputLength: number, maxLength: number) => string;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the ionInput event after each keystroke.
          * @config 
          * @default 0
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. That specifies what action label (or icon) to present for the enter key on virtual keyboards.  - `enter`: Typically Inserting a new line. - `done`: Typically meaning there is nothing more to input and the input method editor (IME) will be closed. - `go`: Typically meaning to take the user to the target of the text they typed. - `next`: Typically taking the user to the next field that will accept text. - `previous`: Typically taking the user to the previous field that will accept text. - `search`: Typically taking the user to the results of searching for the text they have typed. - `send`: Typically delivering the text to its target.
          * @config
         */
        "enterkeyhint"?: EnterKeyHint;
        /**
          * Text that is placed under the textarea and displayed when an error is detected.
         */
        "errorText": string;
        /**
          * Text that is placed under the textarea and displayed when no error is detected.
         */
        "helperText": string;
        /**
          * A hint to the browser for which virtual keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "keyboard"?: KeyboardType;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
          * @config
         */
        "max"?: number | string;
        /**
          * This attribute specifies the maximum number of characters that the user can enter.
          * @config
         */
        "maxLength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
          * @config
         */
        "min"?: number;
        /**
          * This attribute specifies the minimum number of characters that the user can enter.
          * @config
         */
        "minLength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.  This property applies only when the `type` property is set to `"email"`, `"number"`, `"password"`, `"search"`, `"tel"`, `"text"`, or `"url"`, otherwise it is ignored.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Sets focus on the native `textarea` in `pop-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * If `true`, the element will have its spelling and grammar checked. By default the User Agent make their own default behavior.
          * @config 
          * @default false
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
          * @config
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type": InputType;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | number | null;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface PopInputFile {
        /**
          * If `true`, the element will be focused on page load.
          * @config 
          * @default false
         */
        "autoFocus"?: boolean;
        /**
          * if `true`, adds border to textarea when `color` property is not set.
          * @config 
          * @default false
         */
        "bordered"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: InputFileColor;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Text that is placed under the textarea and displayed when an error is detected.
         */
        "errorText": string;
        /**
          * Text that is placed under the textarea and displayed when no error is detected.
         */
        "helperText": string;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"`, otherwise it is ignored.
          * @config 
          * @default false
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Sets focus on the native `textarea` in `pop-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: File | File[] | null;
    }
    interface PopItem {
        /**
          * If `true`, the user cannot interact with the item.
          * @config 
          * @default false
         */
        "disabled": boolean;
    }
    /**
     * Join is a container for grouping multiple items, it can be used to group buttons, inputs, or any other element.
     * Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items.
     */
    interface PopJoin {
        /**
          * Define content disposition orientation
          * @config 
          * @default "horizontal"
         */
        "orientation": JoinOrientation;
    }
    /**
     * Kbd is used to display keyboard shortcuts.
     */
    interface PopKbd {
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
    }
    interface PopList {
        /**
          * Define content disposition orientation
          * @config 
          * @default "vertical"
         */
        "orientation"?: ListOrientation;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
    }
    /**
     * Loading shows an animation to indicate that something is loading.
     */
    interface PopLoading {
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * Apply different animation
          * @config 
          * @default "spinner"
         */
        "type"?: LoadingType;
    }
    /**
     * Mask crops the content of the element to common shapes.
     */
    interface PopMask {
        /**
          * Mask that should be applied
          * @config 
          * @default "squircle"
         */
        "type": MaskType;
    }
    /**
     * Describe whats does the component
     */
    interface PopModal {
        /**
          * If `true`, the modal will be dismissed when the backdrop is clicked.
          * @config 
          * @default false
         */
        "backdropDismiss"?: boolean;
        /**
          * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `pop-popover`.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Close the modal
          * @param data Data to return on close
          * @returns `true` if the modal has been closed, otherwise `false`
         */
        "dismiss": (data: any) => Promise<boolean>;
        /**
          * If `true`, the modal will open. If `false`, the modal will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `open` will automatically be set back to `false` when the modal dismisses.
          * @config 
          * @default false
         */
        "open"?: boolean;
        "present": () => Promise<boolean>;
        /**
          * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented.
          * @config 
          * @default false
         */
        "showBackdrop"?: boolean;
        /**
          * An ID corresponding to the trigger element that causes the modal to open when clicked.
         */
        "trigger"?: string;
    }
    /**
     * Navbar is used to show a navigation bar on the top of the page.
     */
    interface PopNavbar {
    }
    interface PopPopover {
        /**
          * If `true`, the popover will animate.
          * @config 
          * @default false
         */
        "animated": any;
        /**
          * If `true`, the popover will be dismissed when the backdrop is clicked.
          * @config 
          * @default false
         */
        "backdropDismiss": boolean;
        /**
          * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `pop-popover`.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
         */
        "componentProps"?: ComponentProps;
        "dismiss": (data?: any) => Promise<boolean>;
        /**
          * The event to pass to the popover animation.
         */
        "event": Event;
        /**
          * If `true`, the popover will open. If `false`, the popover will close. Use this if you need finer grained control over presentation, otherwise just use the popoverController or the `trigger` property. Note: `open` will not automatically be set back to `false` when the popover dismisses. You will need to do that in your code.
          * @config 
          * @default false
         */
        "open": boolean;
        "present": () => Promise<boolean>;
        /**
          * If `true`, a backdrop will be displayed behind the popover. This property controls whether or not the backdrop darkens the screen when the popover is presented. It does not control whether or not the backdrop is active or present in the DOM.
          * @config 
          * @default false
         */
        "showBackdrop": boolean;
        /**
          * An ID corresponding to the trigger element that causes the popover to open. Use the `trigger-action` property to customize the interaction that results in the popover opening.
         */
        "trigger"?: string;
        /**
          * Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `"click"`, the popover will be presented when the trigger is left clicked. If `"hover"`, the popover will be presented when a pointer hovers over the trigger. If `"context-menu"`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
          * @config 
          * @default "click"
         */
        "triggerAction": TriggerAction;
    }
    /**
     * Progress bar can be used to show the progress of a task or to show the passing of time.
     */
    interface PopProgress {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: Color;
        /**
          * @config 
          * @default 100
         */
        "max"?: number;
        /**
          * The value of a progress is analogous to the value of a `<progress>`
         */
        "value"?: number;
    }
    /**
     * Radio buttons allow the user to select one option from a set.
     */
    interface PopRadio {
        /**
          * If `true`, the element will be focused on page load.
         */
        "autoFocus"?: boolean;
        /**
          * If `true`, the radio is selected.
         */
        "checked"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Sets focus on the native `textarea` in `pop-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The value of the radio does not mean if it's checked or not, use the `checked` property for that.  The value of a radio is analogous to the value of a `<input type="radio">`, it's only used when the radio participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface PopRadioGroup {
        /**
          * If `true`, the radios can be deselected.
          * @config 
          * @default false
         */
        "allowEmpty"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).  If the `pop-radio` as no color, it will apply to it
          * @config
         */
        "color"?: Color;
        /**
          * This property allows developers to specify a custom function for comparing objects when determining the selected option in the ion-radio-group. When not specified, the default behavior will use strict equality (===) for comparison.
          * @config
         */
        "compare"?: RadioGroupCompareFn | string | null;
        /**
          * If `true`, apply the disabled property to all `pop-radio`.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, apply the required property to all `pop-radio`.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.  If the `pop-radio` as no size, it will apply to it
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    /**
     * Range slider is used to select a value by sliding a handle.
     */
    interface PopRange {
        /**
          * If `true`, the element will be focused on page load.
         */
        "autoFocus"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: RangeColor;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the ionInput event after each keystroke.
          * @config 
          * @default 0
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
          * @config 
          * @default 100
         */
        "max"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
          * @config 
          * @default 0
         */
        "min"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Sets focus on the native `input` in `pop-range`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set.
          * @config 
          * @default 1
         */
        "step"?: number;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: number | null;
    }
    interface PopSelect {
        /**
          * If `true`, the element will be focused on page load.
         */
        "autoFocus"?: boolean;
        /**
          * if `true`, adds border to textarea when `color` property is not set.
          * @config 
          * @default false
         */
        "bordered"?: boolean;
        "close": () => Promise<void>;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: SelectColor;
        /**
          * This property allows developers to specify a custom function for comparing objects when determining the selected option in the ion-radio-group. When not specified, the default behavior will use strict equality (===) for comparison.
          * @config
         */
        "compare"?: SelectCompareFn | string | null;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Text that is placed under the textarea and displayed when no error is detected.
         */
        "helperText"?: string;
        /**
          * Only apply when `multiple` property is used. The maximum amount of values that can be selected, which must not be less than its minimum (min attribute) value.
          * @config
         */
        "max"?: number;
        /**
          * Only apply when `multiple` property is used. The minimum amount of values that can be selected, which must not be greater than its maximum (max attribute) value.
          * @config
         */
        "min"?: number;
        /**
          * If `true`, the user can enter more than one value.
          * @config 
          * @default false
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Only apply when `multiple` property is used. Text that is placed under the select and displayed when the amount of selected option is below of the `min` property.
         */
        "notEnoughErrorText"?: string;
        "open": (event?: any) => Promise<HTMLPopPopoverElement>;
        /**
          * Instructional text that shows before the input has a value.  This property replace the `<option disabled selected>`
         */
        "placeholder"?: string;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * The text to display instead of the selected option's value.
         */
        "selectedText"?: string;
        /**
          * Sets focus on the native `select` in `pop-select`. Use this method instead of the global `select.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * Only apply when `multiple` property is used. Text that is placed under the select and displayed when the amount of selected option is greater of the `max` property.
         */
        "tooManyErrorText"?: string;
        /**
          * The value of a select is analogous to the value of a `<select>`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface PopSelectOption {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the select option. This property does not apply when `interface="action-sheet"` as `ion-action-sheet` does not allow for disabled buttons.
         */
        "disabled"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
         */
        "size"?: Size;
        /**
          * The text value of the option.
         */
        "value"?: any | null;
    }
    interface PopSelectPopover {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the select accepts multiple values
         */
        "multiple"?: boolean;
        /**
          * An array of options for the popover
         */
        "options": SelectPopoverOption[];
        /**
          * If `true`, allow empty on radio options
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
         */
        "size"?: Size;
    }
    /**
     * Swap allows you to toggle the visibility of two elements.
     */
    interface PopSwap {
        /**
          * Activates the swap. Show whats inside the slot `on`
          * @config 
          * @default false
         */
        "active"?: boolean;
        /**
          * Choose what animation is used on click.
          * @config 
          * @default "rotate"
         */
        "type"?: SwapType;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface PopTextarea {
        /**
          * This features work only on mobile and tablet devices. By default the User Agent and input make their own determination.  - `off` or `none`: No autocapitalization is applied (all letters default to lowercase) - `on` or `sentences`: The first letter of each sentence defaults to a capital letter; all other letters default to lowercase - `words`: The first letter of each word defaults to a capital letter; all other letters default to lowercase - `characters`: All letters should default to uppercase
          * @config 
          * @default "off"
         */
        "autoCapitalize"?: AutoCapitalize;
        /**
          * If `true`, the element will be focused on page load.
         */
        "autoFocus"?: boolean;
        /**
          * if `true`, adds border to textarea when `color` property is not set.
          * @config 
          * @default false
         */
        "bordered"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: TextareaColor;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
          * @config
         */
        "cols"?: number;
        /**
          * If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.
          * @config 
          * @default false
         */
        "counter"?: boolean;
        /**
          * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
          * @config
         */
        "counterFormatter"?: (inputLength: number, maxLength: number) => string;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the ionInput event after each keystroke.
          * @config 
          * @default 0
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. That specifies what action label (or icon) to present for the enter key on virtual keyboards.  - `enter`: Typically Inserting a new line. - `done`: Typically meaning there is nothing more to input and the input method editor (IME) will be closed. - `go`: Typically meaning to take the user to the target of the text they typed. - `next`: Typically taking the user to the next field that will accept text. - `previous`: Typically taking the user to the previous field that will accept text. - `search`: Typically taking the user to the results of searching for the text they have typed. - `send`: Typically delivering the text to its target.
         */
        "enterkeyhint"?: EnterKeyHint;
        /**
          * Text that is placed under the textarea and displayed when an error is detected.
         */
        "errorText": string;
        /**
          * Text that is placed under the textarea and displayed when no error is detected.
         */
        "helperText": string;
        /**
          * A hint to the browser for which virtual keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "keyboard"?: KeyboardType;
        /**
          * This attribute specifies the maximum number of characters that the user can enter.
          * @config
         */
        "maxLength"?: number;
        /**
          * This attribute specifies the minimum number of characters that the user can enter.
          * @config
         */
        "minLength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * The number of visible text lines for the control.
          * @config
         */
        "rows"?: number;
        /**
          * Sets focus on the native `textarea` in `pop-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * If `true`, the element will have its spelling and grammar checked. By default the User Agent make their own default behavior.
          * @config 
          * @default false
         */
        "spellcheck": boolean;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.  - `soft`: Text is not to be wrapped when submitted (though can still be wrapped in the rendering). - `hard`: Text is to have newlines added by the user agent so that the text is wrapped when it is submitted.  If wrap attribute is in the `hard` state, the `cols` property must be specified.
          * @config 
          * @default "soft"
         */
        "wrap"?: Wrap;
    }
    /**
     * Toggle is a checkbox that is styled to look like a switch button.
     */
    interface PopToggle {
        /**
          * If `true`, the toggle is selected.
          * @config 
          * @default false
         */
        "checked"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: ToggleColor;
        /**
          * If true, the user cannot interact with the native element.
          * @config 
          * @default false
         */
        "disabled": boolean;
        /**
          * If a developer want to use `indeterminate`, `checked` property should be set to `false`
          * @config 
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Sets focus on the native `input` in `pop-toggle`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | null;
    }
    /**
     * Tooltip can be used to show a message when hovering over an element.
     */
    interface PopTooltip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: Color;
        /**
          * Force open tooltip
          * @config 
          * @default false
         */
        "open": boolean;
        /**
          * Define the position of tooltip By default the tootip appear on top
          * @config 
          * @default "top"
         */
        "position"?: TooltipPosition;
        /**
          * Text to show on hover
         */
        "value": string;
    }
}
export interface PopAccordionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopAccordionGroupElement;
}
export interface PopButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopButtonElement;
}
export interface PopCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopCheckboxElement;
}
export interface PopDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopDropdownElement;
}
export interface PopImgCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopImgElement;
}
export interface PopInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopInputElement;
}
export interface PopInputFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopInputFileElement;
}
export interface PopModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopModalElement;
}
export interface PopPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopPopoverElement;
}
export interface PopRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopRadioElement;
}
export interface PopRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopRadioGroupElement;
}
export interface PopRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopRangeElement;
}
export interface PopSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopSelectElement;
}
export interface PopSwapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopSwapElement;
}
export interface PopTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopTextareaElement;
}
export interface PopToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopToggleElement;
}
declare global {
    /**
     * Accordion is used for showing and hiding content.
     */
    interface HTMLPopAccordionElement extends Components.PopAccordion, HTMLStencilElement {
    }
    var HTMLPopAccordionElement: {
        prototype: HTMLPopAccordionElement;
        new (): HTMLPopAccordionElement;
    };
    interface HTMLPopAccordionGroupElementEventMap {
        "popChange": AccordionGroupChangeEventDetail;
        "popActiveChange": AccordionGroupChangeEventDetail;
    }
    interface HTMLPopAccordionGroupElement extends Components.PopAccordionGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopAccordionGroupElementEventMap>(type: K, listener: (this: HTMLPopAccordionGroupElement, ev: PopAccordionGroupCustomEvent<HTMLPopAccordionGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopAccordionGroupElementEventMap>(type: K, listener: (this: HTMLPopAccordionGroupElement, ev: PopAccordionGroupCustomEvent<HTMLPopAccordionGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopAccordionGroupElement: {
        prototype: HTMLPopAccordionGroupElement;
        new (): HTMLPopAccordionGroupElement;
    };
    /**
     * Avatars are used to show a thumbnail representation of an individual or business in the interface.
     */
    interface HTMLPopAvatarElement extends Components.PopAvatar, HTMLStencilElement {
    }
    var HTMLPopAvatarElement: {
        prototype: HTMLPopAvatarElement;
        new (): HTMLPopAvatarElement;
    };
    /**
     * Badges are used to inform the user of the status of specific data.
     */
    interface HTMLPopBadgeElement extends Components.PopBadge, HTMLStencilElement {
    }
    var HTMLPopBadgeElement: {
        prototype: HTMLPopBadgeElement;
        new (): HTMLPopBadgeElement;
    };
    interface HTMLPopButtonElementEventMap {
        "popFocus": void;
        "popBlur": void;
    }
    /**
     * Buttons allow the user to take actions or make choices.
     */
    interface HTMLPopButtonElement extends Components.PopButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopButtonElementEventMap>(type: K, listener: (this: HTMLPopButtonElement, ev: PopButtonCustomEvent<HTMLPopButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopButtonElementEventMap>(type: K, listener: (this: HTMLPopButtonElement, ev: PopButtonCustomEvent<HTMLPopButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopButtonElement: {
        prototype: HTMLPopButtonElement;
        new (): HTMLPopButtonElement;
    };
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface HTMLPopCardElement extends Components.PopCard, HTMLStencilElement {
    }
    var HTMLPopCardElement: {
        prototype: HTMLPopCardElement;
        new (): HTMLPopCardElement;
    };
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface HTMLPopCardActionsElement extends Components.PopCardActions, HTMLStencilElement {
    }
    var HTMLPopCardActionsElement: {
        prototype: HTMLPopCardActionsElement;
        new (): HTMLPopCardActionsElement;
    };
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface HTMLPopCardBodyElement extends Components.PopCardBody, HTMLStencilElement {
    }
    var HTMLPopCardBodyElement: {
        prototype: HTMLPopCardBodyElement;
        new (): HTMLPopCardBodyElement;
    };
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface HTMLPopCardTitleElement extends Components.PopCardTitle, HTMLStencilElement {
    }
    var HTMLPopCardTitleElement: {
        prototype: HTMLPopCardTitleElement;
        new (): HTMLPopCardTitleElement;
    };
    interface HTMLPopCheckboxElementEventMap {
        "popChange": CheckboxChangeEventDetail;
        "popFocus": void;
        "popBlur": void;
    }
    /**
     * Toggles are switches that change the state of a single option.
     * They can be switched on or off by pressing.
     * Toggles can also be `"checked"` programmatically by setting the checked property.
     */
    interface HTMLPopCheckboxElement extends Components.PopCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopCheckboxElementEventMap>(type: K, listener: (this: HTMLPopCheckboxElement, ev: PopCheckboxCustomEvent<HTMLPopCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopCheckboxElementEventMap>(type: K, listener: (this: HTMLPopCheckboxElement, ev: PopCheckboxCustomEvent<HTMLPopCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopCheckboxElement: {
        prototype: HTMLPopCheckboxElement;
        new (): HTMLPopCheckboxElement;
    };
    /**
     * Divider will be used to separate content vertically or horizontally.
     */
    interface HTMLPopDividerElement extends Components.PopDivider, HTMLStencilElement {
    }
    var HTMLPopDividerElement: {
        prototype: HTMLPopDividerElement;
        new (): HTMLPopDividerElement;
    };
    /**
     * Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page.
     */
    interface HTMLPopDrawerElement extends Components.PopDrawer, HTMLStencilElement {
    }
    var HTMLPopDrawerElement: {
        prototype: HTMLPopDrawerElement;
        new (): HTMLPopDrawerElement;
    };
    interface HTMLPopDropdownElementEventMap {
        "didPresent": void;
        "didDismiss": void;
    }
    /**
     * Describe whats does the component
     */
    interface HTMLPopDropdownElement extends Components.PopDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopDropdownElementEventMap>(type: K, listener: (this: HTMLPopDropdownElement, ev: PopDropdownCustomEvent<HTMLPopDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopDropdownElementEventMap>(type: K, listener: (this: HTMLPopDropdownElement, ev: PopDropdownCustomEvent<HTMLPopDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopDropdownElement: {
        prototype: HTMLPopDropdownElement;
        new (): HTMLPopDropdownElement;
    };
    interface HTMLPopImgElementEventMap {
        "popWillLoad": void;
        "popDidLoad": void;
        "popError": void;
    }
    interface HTMLPopImgElement extends Components.PopImg, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopImgElementEventMap>(type: K, listener: (this: HTMLPopImgElement, ev: PopImgCustomEvent<HTMLPopImgElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopImgElementEventMap>(type: K, listener: (this: HTMLPopImgElement, ev: PopImgCustomEvent<HTMLPopImgElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopImgElement: {
        prototype: HTMLPopImgElement;
        new (): HTMLPopImgElement;
    };
    /**
     * Indicators are used to place an element on the corner of another element.
     */
    interface HTMLPopIndicatorElement extends Components.PopIndicator, HTMLStencilElement {
    }
    var HTMLPopIndicatorElement: {
        prototype: HTMLPopIndicatorElement;
        new (): HTMLPopIndicatorElement;
    };
    interface HTMLPopInputElementEventMap {
        "popChange": InputChangeEventDetail;
        "popInput": InputInputEventDetail;
        "popFocus": void;
        "popBlur": void;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface HTMLPopInputElement extends Components.PopInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopInputElementEventMap>(type: K, listener: (this: HTMLPopInputElement, ev: PopInputCustomEvent<HTMLPopInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopInputElementEventMap>(type: K, listener: (this: HTMLPopInputElement, ev: PopInputCustomEvent<HTMLPopInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopInputElement: {
        prototype: HTMLPopInputElement;
        new (): HTMLPopInputElement;
    };
    interface HTMLPopInputFileElementEventMap {
        "popChange": InputFileChangeEventDetail;
        "popFocus": void;
        "popBlur": void;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface HTMLPopInputFileElement extends Components.PopInputFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopInputFileElementEventMap>(type: K, listener: (this: HTMLPopInputFileElement, ev: PopInputFileCustomEvent<HTMLPopInputFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopInputFileElementEventMap>(type: K, listener: (this: HTMLPopInputFileElement, ev: PopInputFileCustomEvent<HTMLPopInputFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopInputFileElement: {
        prototype: HTMLPopInputFileElement;
        new (): HTMLPopInputFileElement;
    };
    interface HTMLPopItemElement extends Components.PopItem, HTMLStencilElement {
    }
    var HTMLPopItemElement: {
        prototype: HTMLPopItemElement;
        new (): HTMLPopItemElement;
    };
    /**
     * Join is a container for grouping multiple items, it can be used to group buttons, inputs, or any other element.
     * Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items.
     */
    interface HTMLPopJoinElement extends Components.PopJoin, HTMLStencilElement {
    }
    var HTMLPopJoinElement: {
        prototype: HTMLPopJoinElement;
        new (): HTMLPopJoinElement;
    };
    /**
     * Kbd is used to display keyboard shortcuts.
     */
    interface HTMLPopKbdElement extends Components.PopKbd, HTMLStencilElement {
    }
    var HTMLPopKbdElement: {
        prototype: HTMLPopKbdElement;
        new (): HTMLPopKbdElement;
    };
    interface HTMLPopListElement extends Components.PopList, HTMLStencilElement {
    }
    var HTMLPopListElement: {
        prototype: HTMLPopListElement;
        new (): HTMLPopListElement;
    };
    /**
     * Loading shows an animation to indicate that something is loading.
     */
    interface HTMLPopLoadingElement extends Components.PopLoading, HTMLStencilElement {
    }
    var HTMLPopLoadingElement: {
        prototype: HTMLPopLoadingElement;
        new (): HTMLPopLoadingElement;
    };
    /**
     * Mask crops the content of the element to common shapes.
     */
    interface HTMLPopMaskElement extends Components.PopMask, HTMLStencilElement {
    }
    var HTMLPopMaskElement: {
        prototype: HTMLPopMaskElement;
        new (): HTMLPopMaskElement;
    };
    interface HTMLPopModalElementEventMap {
        "didPresent": void;
        "didDismiss": void;
    }
    /**
     * Describe whats does the component
     */
    interface HTMLPopModalElement extends Components.PopModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopModalElementEventMap>(type: K, listener: (this: HTMLPopModalElement, ev: PopModalCustomEvent<HTMLPopModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopModalElementEventMap>(type: K, listener: (this: HTMLPopModalElement, ev: PopModalCustomEvent<HTMLPopModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopModalElement: {
        prototype: HTMLPopModalElement;
        new (): HTMLPopModalElement;
    };
    /**
     * Navbar is used to show a navigation bar on the top of the page.
     */
    interface HTMLPopNavbarElement extends Components.PopNavbar, HTMLStencilElement {
    }
    var HTMLPopNavbarElement: {
        prototype: HTMLPopNavbarElement;
        new (): HTMLPopNavbarElement;
    };
    interface HTMLPopPopoverElementEventMap {
        "willPresent": void;
        "didPresent": void;
        "willDismiss": void;
        "didDismiss": void;
    }
    interface HTMLPopPopoverElement extends Components.PopPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopPopoverElementEventMap>(type: K, listener: (this: HTMLPopPopoverElement, ev: PopPopoverCustomEvent<HTMLPopPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopPopoverElementEventMap>(type: K, listener: (this: HTMLPopPopoverElement, ev: PopPopoverCustomEvent<HTMLPopPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopPopoverElement: {
        prototype: HTMLPopPopoverElement;
        new (): HTMLPopPopoverElement;
    };
    /**
     * Progress bar can be used to show the progress of a task or to show the passing of time.
     */
    interface HTMLPopProgressElement extends Components.PopProgress, HTMLStencilElement {
    }
    var HTMLPopProgressElement: {
        prototype: HTMLPopProgressElement;
        new (): HTMLPopProgressElement;
    };
    interface HTMLPopRadioElementEventMap {
        "popFocus": void;
        "popBlur": void;
    }
    /**
     * Radio buttons allow the user to select one option from a set.
     */
    interface HTMLPopRadioElement extends Components.PopRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopRadioElementEventMap>(type: K, listener: (this: HTMLPopRadioElement, ev: PopRadioCustomEvent<HTMLPopRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopRadioElementEventMap>(type: K, listener: (this: HTMLPopRadioElement, ev: PopRadioCustomEvent<HTMLPopRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopRadioElement: {
        prototype: HTMLPopRadioElement;
        new (): HTMLPopRadioElement;
    };
    interface HTMLPopRadioGroupElementEventMap {
        "popChange": RadioGroupChangeEventDetail;
        "popValueChange": RadioGroupChangeEventDetail;
    }
    interface HTMLPopRadioGroupElement extends Components.PopRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopRadioGroupElementEventMap>(type: K, listener: (this: HTMLPopRadioGroupElement, ev: PopRadioGroupCustomEvent<HTMLPopRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopRadioGroupElementEventMap>(type: K, listener: (this: HTMLPopRadioGroupElement, ev: PopRadioGroupCustomEvent<HTMLPopRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopRadioGroupElement: {
        prototype: HTMLPopRadioGroupElement;
        new (): HTMLPopRadioGroupElement;
    };
    interface HTMLPopRangeElementEventMap {
        "popChange": RangeChangeEventDetail;
        "popFocus": void;
        "popBlur": void;
    }
    /**
     * Range slider is used to select a value by sliding a handle.
     */
    interface HTMLPopRangeElement extends Components.PopRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopRangeElementEventMap>(type: K, listener: (this: HTMLPopRangeElement, ev: PopRangeCustomEvent<HTMLPopRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopRangeElementEventMap>(type: K, listener: (this: HTMLPopRangeElement, ev: PopRangeCustomEvent<HTMLPopRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopRangeElement: {
        prototype: HTMLPopRangeElement;
        new (): HTMLPopRangeElement;
    };
    interface HTMLPopSelectElementEventMap {
        "popDismiss": void;
        "popChange": SelectChangeEventDetail;
        "popFocus": void;
        "popBlur": void;
    }
    interface HTMLPopSelectElement extends Components.PopSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopSelectElementEventMap>(type: K, listener: (this: HTMLPopSelectElement, ev: PopSelectCustomEvent<HTMLPopSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopSelectElementEventMap>(type: K, listener: (this: HTMLPopSelectElement, ev: PopSelectCustomEvent<HTMLPopSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopSelectElement: {
        prototype: HTMLPopSelectElement;
        new (): HTMLPopSelectElement;
    };
    interface HTMLPopSelectOptionElement extends Components.PopSelectOption, HTMLStencilElement {
    }
    var HTMLPopSelectOptionElement: {
        prototype: HTMLPopSelectOptionElement;
        new (): HTMLPopSelectOptionElement;
    };
    interface HTMLPopSelectPopoverElement extends Components.PopSelectPopover, HTMLStencilElement {
    }
    var HTMLPopSelectPopoverElement: {
        prototype: HTMLPopSelectPopoverElement;
        new (): HTMLPopSelectPopoverElement;
    };
    interface HTMLPopSwapElementEventMap {
        "popSwap": SwapChangeEventDetail;
    }
    /**
     * Swap allows you to toggle the visibility of two elements.
     */
    interface HTMLPopSwapElement extends Components.PopSwap, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopSwapElementEventMap>(type: K, listener: (this: HTMLPopSwapElement, ev: PopSwapCustomEvent<HTMLPopSwapElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopSwapElementEventMap>(type: K, listener: (this: HTMLPopSwapElement, ev: PopSwapCustomEvent<HTMLPopSwapElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopSwapElement: {
        prototype: HTMLPopSwapElement;
        new (): HTMLPopSwapElement;
    };
    interface HTMLPopTextareaElementEventMap {
        "popChange": TextareaChangeEventDetail;
        "popInput": TextareaInputEventDetail;
        "popFocus": void;
        "popBlur": void;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface HTMLPopTextareaElement extends Components.PopTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopTextareaElementEventMap>(type: K, listener: (this: HTMLPopTextareaElement, ev: PopTextareaCustomEvent<HTMLPopTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopTextareaElementEventMap>(type: K, listener: (this: HTMLPopTextareaElement, ev: PopTextareaCustomEvent<HTMLPopTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopTextareaElement: {
        prototype: HTMLPopTextareaElement;
        new (): HTMLPopTextareaElement;
    };
    interface HTMLPopToggleElementEventMap {
        "popChange": ToggleChangeEventDetail;
        "popFocus": void;
        "popBlur": void;
    }
    /**
     * Toggle is a checkbox that is styled to look like a switch button.
     */
    interface HTMLPopToggleElement extends Components.PopToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopToggleElementEventMap>(type: K, listener: (this: HTMLPopToggleElement, ev: PopToggleCustomEvent<HTMLPopToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopToggleElementEventMap>(type: K, listener: (this: HTMLPopToggleElement, ev: PopToggleCustomEvent<HTMLPopToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopToggleElement: {
        prototype: HTMLPopToggleElement;
        new (): HTMLPopToggleElement;
    };
    /**
     * Tooltip can be used to show a message when hovering over an element.
     */
    interface HTMLPopTooltipElement extends Components.PopTooltip, HTMLStencilElement {
    }
    var HTMLPopTooltipElement: {
        prototype: HTMLPopTooltipElement;
        new (): HTMLPopTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "pop-accordion": HTMLPopAccordionElement;
        "pop-accordion-group": HTMLPopAccordionGroupElement;
        "pop-avatar": HTMLPopAvatarElement;
        "pop-badge": HTMLPopBadgeElement;
        "pop-button": HTMLPopButtonElement;
        "pop-card": HTMLPopCardElement;
        "pop-card-actions": HTMLPopCardActionsElement;
        "pop-card-body": HTMLPopCardBodyElement;
        "pop-card-title": HTMLPopCardTitleElement;
        "pop-checkbox": HTMLPopCheckboxElement;
        "pop-divider": HTMLPopDividerElement;
        "pop-drawer": HTMLPopDrawerElement;
        "pop-dropdown": HTMLPopDropdownElement;
        "pop-img": HTMLPopImgElement;
        "pop-indicator": HTMLPopIndicatorElement;
        "pop-input": HTMLPopInputElement;
        "pop-input-file": HTMLPopInputFileElement;
        "pop-item": HTMLPopItemElement;
        "pop-join": HTMLPopJoinElement;
        "pop-kbd": HTMLPopKbdElement;
        "pop-list": HTMLPopListElement;
        "pop-loading": HTMLPopLoadingElement;
        "pop-mask": HTMLPopMaskElement;
        "pop-modal": HTMLPopModalElement;
        "pop-navbar": HTMLPopNavbarElement;
        "pop-popover": HTMLPopPopoverElement;
        "pop-progress": HTMLPopProgressElement;
        "pop-radio": HTMLPopRadioElement;
        "pop-radio-group": HTMLPopRadioGroupElement;
        "pop-range": HTMLPopRangeElement;
        "pop-select": HTMLPopSelectElement;
        "pop-select-option": HTMLPopSelectOptionElement;
        "pop-select-popover": HTMLPopSelectPopoverElement;
        "pop-swap": HTMLPopSwapElement;
        "pop-textarea": HTMLPopTextareaElement;
        "pop-toggle": HTMLPopToggleElement;
        "pop-tooltip": HTMLPopTooltipElement;
    }
}
declare namespace LocalJSX {
    /**
     * Accordion is used for showing and hiding content.
     */
    interface PopAccordion {
        /**
          * If `true`, the user cannot interact with the element.
         */
        "disabled"?: boolean;
        /**
          * name of the accordion
         */
        "name": string;
        /**
          * If `true`, the accordion is open.  The developer must not set this value to `true` if the accordion is used in `<accordion-group>` element and set the active property to the name of the accordion.
         */
        "open"?: boolean;
        /**
          * If `true`, the user cannot interact with the element.
         */
        "readonly"?: boolean;
    }
    interface PopAccordionGroup {
        /**
          * name of the active the accordion.
         */
        "active"?: string | string[];
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * If `true`, the user can open multiple accordion.
          * @config 
          * @default false
         */
        "multiple"?: boolean;
        /**
          * Emitted when the `active` property has changed. This is used to ensure that `pop-accordion` can respond to any value property changes from the group.
         */
        "onPopActiveChange"?: (event: PopAccordionGroupCustomEvent<AccordionGroupChangeEventDetail>) => void;
        /**
          * The `popChange` event is fired when the user select an open of close an accordion.
         */
        "onPopChange"?: (event: PopAccordionGroupCustomEvent<AccordionGroupChangeEventDetail>) => void;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
    }
    /**
     * Avatars are used to show a thumbnail representation of an individual or business in the interface.
     */
    interface PopAvatar {
        /**
          * To show some letters as avatar placeholder
          * @config 
          * @default false
         */
        "placeholder"?: boolean;
    }
    /**
     * Badges are used to inform the user of the status of specific data.
     */
    interface PopBadge {
        /**
          * Used HTML element for
          * @config 
          * @default "div"
         */
        "as"?: BadgeAs;
        /**
          * The color to use from your application's color palette. Default options are: `"neutral"`, `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: BadgeColor;
        /**
          * Transparent Badge with colored border
          * @config 
          * @default false
         */
        "outlined"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
    }
    /**
     * Buttons allow the user to take actions or make choices.
     */
    interface PopButton {
        /**
          * The color to use from your application's color palette. Default options are: `"neutral"`, `"ghost"`, `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: ButtonColor;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * `wide` Add more horizontal padding `block` make a full width button
          * @config
         */
        "expand"?: ButtonExpand;
        /**
          * The HTML form element id. Used to submit a form when the button is not a child of the form.
         */
        "form"?: string | HTMLFormElement;
        /**
          * Emitted when the button loses focus.
         */
        "onPopBlur"?: (event: PopButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onPopFocus"?: (event: PopButtonCustomEvent<void>) => void;
        /**
          * Transparent Button with colored border
          * @config 
          * @default false
         */
        "outlined"?: boolean;
        /**
          * `square` set button width and heigth with 1:1 ratio `round` set button width and heigth with 1:1 ratio and rounded corners.
          * @config
         */
        "shape"?: ButtonShape;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The type of the button.
         */
        "type"?: ButtonType;
    }
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface PopCard {
        /**
          * Applies smaller padding
          * @config 
          * @default false
         */
        "compact"?: boolean;
    }
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface PopCardActions {
    }
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface PopCardBody {
    }
    /**
     * Cards are used to group and display content in a way that is easily readable.
     */
    interface PopCardTitle {
    }
    /**
     * Toggles are switches that change the state of a single option.
     * They can be switched on or off by pressing.
     * Toggles can also be `"checked"` programmatically by setting the checked property.
     */
    interface PopCheckbox {
        /**
          * If `true`, the toggle is selected.
          * @config 
          * @default false
         */
        "checked"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: Color;
        /**
          * If true, the user cannot interact with the native element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * If a developer want to use `indeterminate`, `checked` property should be set to `false`
          * @config 
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPopBlur"?: (event: PopCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the user switches the toggle on or off.
         */
        "onPopChange"?: (event: PopCheckboxCustomEvent<CheckboxChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPopFocus"?: (event: PopCheckboxCustomEvent<void>) => void;
        /**
          * Where to place the label relative to the checkbox. - `"start"`: The label will appear to the left of the checkbox in LTR and to the right in RTL. - `"end"`: The label will appear to the right of the checkbox in LTR and to the left in RTL.
          * @config 
          * @default "start"
         */
        "placement"?: CheckboxPlacement;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | null;
    }
    /**
     * Divider will be used to separate content vertically or horizontally.
     */
    interface PopDivider {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"neutral"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: DividerColor;
        /**
          * Define content disposition orientation
          * @config 
          * @default "horizontal"
         */
        "orientation"?: DividerOrientation;
        /**
          * Where to place the content. - `"left"`: The content will appear to the left of the divider in LTR and RTL. - `"start"`: The content will appear to the left of the divider in LTR and to the right in RTL. - `"center"`: The content will appear to the center of the divider. - `"end"`: The content will appear to the right of the divider in LTR and to the left in RTL. - `"right"`: The content will appear to the right of the divider in LTR and RTL.
          * @config 
          * @default "center"
         */
        "placement"?: DividerPlacement;
    }
    /**
     * Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page.
     */
    interface PopDrawer {
        /**
          * Forces the drawer to be open
          * @config 
          * @default false
         */
        "open"?: boolean;
        /**
          * Where to place the sidebar relative to the screen. - `"start"`: The sidebar will appear to the left of the screen in LTR and to the right in RTL. - `"end"`: The sidebar will appear to the right of the screen in LTR and to the left in RTL.
          * @config 
          * @default "start"
         */
        "side"?: DrawerSide;
        /**
          * An ID corresponding to the trigger element that causes the drawer to open. Use the `trigger-action` property to customize the interaction that results in the sidebar opening.
         */
        "trigger"?: string;
        /**
          * Describes what kind of interaction with the trigger that should cause the sidebar to open. Does not apply when the `trigger` property is `undefined`. - `"click"`: the sidebar will be presented when the trigger is left clicked. - `"hover"`: the sidebar will be presented when a pointer hovers over the trigger. - `"context-menu"`: the sidebar will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
          * @config 
          * @default "click"
         */
        "triggerAction"?: TriggerAction;
    }
    /**
     * Describe whats does the component
     */
    interface PopDropdown {
        /**
          * Describes how the dropdown has to be alined - "start": Align to the left in LTR and to the right in RTL. - "end": Align to the right in LTR and to the left in RTL.
          * @config 
          * @default "start"
         */
        "align"?: DropdownAlign;
        /**
          * Set the amount of time, in milliseconds after the user no longer hover the trigger or dropdown, will dismiss. Only apply on `triggerAction=hover`
          * @config 
          * @default 100
         */
        "debounce"?: number;
        /**
          * Emitted after the modal has dismissed.
         */
        "onDidDismiss"?: (event: PopDropdownCustomEvent<void>) => void;
        /**
          * Emitted after the modal has presented.
         */
        "onDidPresent"?: (event: PopDropdownCustomEvent<void>) => void;
        /**
          * Force the dropdown to be shown
          * @config 
          * @default false
         */
        "open"?: boolean;
        /**
          * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented.
          * @config 
          * @default false
         */
        "showBackdrop"?: boolean;
        /**
          * @config 
          * @default "bottom"
         */
        "side"?: DropdownSide;
        /**
          * Describes what kind of intertion with the trigger (sloted element) that should cause the dropdown to open. - `"click"`: the dropdown will be presented when the trigger is left clicked. - `"hover"`: the dropdown will be presented when a pointer hovers over the trigger. - `"context-menu"`: the dropdown will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
          * @config 
          * @default "click"
         */
        "triggerAction"?: TriggerAction;
    }
    interface PopImg {
        /**
          * This attribute defines the alternative text describing the image. Users will see this text displayed if the image URL is wrong, the image is not in one of the supported formats, or if the image is not yet downloaded.
         */
        "alt"?: string;
        /**
          * Emitted when the image has finished loading
         */
        "onPopDidLoad"?: (event: PopImgCustomEvent<void>) => void;
        /**
          * Emitted when the img fails to load
         */
        "onPopError"?: (event: PopImgCustomEvent<void>) => void;
        /**
          * Emitted when the img src has been set
         */
        "onPopWillLoad"?: (event: PopImgCustomEvent<void>) => void;
        /**
          * The image URL. This attribute is mandatory for the `<img>` element.
         */
        "src"?: string;
    }
    /**
     * Indicators are used to place an element on the corner of another element.
     */
    interface PopIndicator {
        /**
          * Align vertically the indicator.
          * @config 
          * @default "top"
         */
        "position"?: IndicatorPosition;
        /**
          * Align horizontally the indicator.
          * @config 
          * @default "left"
         */
        "side"?: IndicatorSide;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface PopInput {
        /**
          * This features work only on mobile and tablet devices. By default the User Agent and input make their own determination.  - `off` or `none`: No autocapitalization is applied (all letters default to lowercase) - `on` or `sentences`: The first letter of each sentence defaults to a capital letter; all other letters default to lowercase - `words`: The first letter of each word defaults to a capital letter; all other letters default to lowercase - `characters`: All letters should default to uppercase
          * @config 
          * @default "off"
         */
        "autoCapitalize"?: AutoCapitalize;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autoComplete"?: Autocomplete;
        /**
          * If `true`, the element will be focused on page load.
          * @config 
          * @default false
         */
        "autoFocus"?: boolean;
        /**
          * if `true`, adds border to textarea when `color` property is not set.
          * @config 
          * @default false
         */
        "bordered"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: InputColor;
        /**
          * If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.
          * @config 
          * @default false
         */
        "counter"?: boolean;
        /**
          * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
          * @config
         */
        "counterFormatter"?: (inputLength: number, maxLength: number) => string;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the ionInput event after each keystroke.
          * @config 
          * @default 0
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. That specifies what action label (or icon) to present for the enter key on virtual keyboards.  - `enter`: Typically Inserting a new line. - `done`: Typically meaning there is nothing more to input and the input method editor (IME) will be closed. - `go`: Typically meaning to take the user to the target of the text they typed. - `next`: Typically taking the user to the next field that will accept text. - `previous`: Typically taking the user to the previous field that will accept text. - `search`: Typically taking the user to the results of searching for the text they have typed. - `send`: Typically delivering the text to its target.
          * @config
         */
        "enterkeyhint"?: EnterKeyHint;
        /**
          * Text that is placed under the textarea and displayed when an error is detected.
         */
        "errorText"?: string;
        /**
          * Text that is placed under the textarea and displayed when no error is detected.
         */
        "helperText"?: string;
        /**
          * A hint to the browser for which virtual keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "keyboard"?: KeyboardType;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
          * @config
         */
        "max"?: number | string;
        /**
          * This attribute specifies the maximum number of characters that the user can enter.
          * @config
         */
        "maxLength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
          * @config
         */
        "min"?: number;
        /**
          * This attribute specifies the minimum number of characters that the user can enter.
          * @config
         */
        "minLength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPopBlur"?: (event: PopInputCustomEvent<void>) => void;
        /**
          * The `popChange` event is fired when the user modifies the input's value. Unlike the ionInput event, the `popChange` event is fired when the element loses focus after its value has been modified.
         */
        "onPopChange"?: (event: PopInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPopFocus"?: (event: PopInputCustomEvent<void>) => void;
        /**
          * The `popInput` event is fired each time the user modifies the Input's value. Unlike the `popChange` event, the `popInput` event is fired for each alteration to the input's value. This typically happens for each keystroke as the user types.  This event can be debounced by the `debounce` property.
         */
        "onPopInput"?: (event: PopInputCustomEvent<InputInputEventDetail>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.  This property applies only when the `type` property is set to `"email"`, `"number"`, `"password"`, `"search"`, `"tel"`, `"text"`, or `"url"`, otherwise it is ignored.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * If `true`, the element will have its spelling and grammar checked. By default the User Agent make their own default behavior.
          * @config 
          * @default false
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
          * @config
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type"?: InputType;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | number | null;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface PopInputFile {
        /**
          * If `true`, the element will be focused on page load.
          * @config 
          * @default false
         */
        "autoFocus"?: boolean;
        /**
          * if `true`, adds border to textarea when `color` property is not set.
          * @config 
          * @default false
         */
        "bordered"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: InputFileColor;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Text that is placed under the textarea and displayed when an error is detected.
         */
        "errorText"?: string;
        /**
          * Text that is placed under the textarea and displayed when no error is detected.
         */
        "helperText"?: string;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"`, otherwise it is ignored.
          * @config 
          * @default false
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPopBlur"?: (event: PopInputFileCustomEvent<void>) => void;
        /**
          * The `popChange` event is fired when the user modifies the textarea's value. Unlike the ionInput event, the `popChange` event is fired when the element loses focus after its value has been modified.
         */
        "onPopChange"?: (event: PopInputFileCustomEvent<InputFileChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPopFocus"?: (event: PopInputFileCustomEvent<void>) => void;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: File | File[] | null;
    }
    interface PopItem {
        /**
          * If `true`, the user cannot interact with the item.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
    }
    /**
     * Join is a container for grouping multiple items, it can be used to group buttons, inputs, or any other element.
     * Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items.
     */
    interface PopJoin {
        /**
          * Define content disposition orientation
          * @config 
          * @default "horizontal"
         */
        "orientation"?: JoinOrientation;
    }
    /**
     * Kbd is used to display keyboard shortcuts.
     */
    interface PopKbd {
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
    }
    interface PopList {
        /**
          * Define content disposition orientation
          * @config 
          * @default "vertical"
         */
        "orientation"?: ListOrientation;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
    }
    /**
     * Loading shows an animation to indicate that something is loading.
     */
    interface PopLoading {
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * Apply different animation
          * @config 
          * @default "spinner"
         */
        "type"?: LoadingType;
    }
    /**
     * Mask crops the content of the element to common shapes.
     */
    interface PopMask {
        /**
          * Mask that should be applied
          * @config 
          * @default "squircle"
         */
        "type"?: MaskType;
    }
    /**
     * Describe whats does the component
     */
    interface PopModal {
        /**
          * If `true`, the modal will be dismissed when the backdrop is clicked.
          * @config 
          * @default false
         */
        "backdropDismiss"?: boolean;
        /**
          * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `pop-popover`.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Emitted after the modal has dismissed.
         */
        "onDidDismiss"?: (event: PopModalCustomEvent<void>) => void;
        /**
          * Emitted after the modal has presented.
         */
        "onDidPresent"?: (event: PopModalCustomEvent<void>) => void;
        /**
          * If `true`, the modal will open. If `false`, the modal will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `open` will automatically be set back to `false` when the modal dismisses.
          * @config 
          * @default false
         */
        "open"?: boolean;
        /**
          * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented.
          * @config 
          * @default false
         */
        "showBackdrop"?: boolean;
        /**
          * An ID corresponding to the trigger element that causes the modal to open when clicked.
         */
        "trigger"?: string;
    }
    /**
     * Navbar is used to show a navigation bar on the top of the page.
     */
    interface PopNavbar {
    }
    interface PopPopover {
        /**
          * If `true`, the popover will animate.
          * @config 
          * @default false
         */
        "animated"?: any;
        /**
          * If `true`, the popover will be dismissed when the backdrop is clicked.
          * @config 
          * @default false
         */
        "backdropDismiss"?: boolean;
        /**
          * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `pop-popover`.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
         */
        "componentProps"?: ComponentProps;
        /**
          * The event to pass to the popover animation.
         */
        "event"?: Event;
        /**
          * Emitted after the popover has dismissed.
         */
        "onDidDismiss"?: (event: PopPopoverCustomEvent<void>) => void;
        /**
          * Emitted after the popover has presented.
         */
        "onDidPresent"?: (event: PopPopoverCustomEvent<void>) => void;
        /**
          * Emitted before the popover has dismissed.
         */
        "onWillDismiss"?: (event: PopPopoverCustomEvent<void>) => void;
        /**
          * Emitted before the popover has presented.
         */
        "onWillPresent"?: (event: PopPopoverCustomEvent<void>) => void;
        /**
          * If `true`, the popover will open. If `false`, the popover will close. Use this if you need finer grained control over presentation, otherwise just use the popoverController or the `trigger` property. Note: `open` will not automatically be set back to `false` when the popover dismisses. You will need to do that in your code.
          * @config 
          * @default false
         */
        "open"?: boolean;
        /**
          * If `true`, a backdrop will be displayed behind the popover. This property controls whether or not the backdrop darkens the screen when the popover is presented. It does not control whether or not the backdrop is active or present in the DOM.
          * @config 
          * @default false
         */
        "showBackdrop"?: boolean;
        /**
          * An ID corresponding to the trigger element that causes the popover to open. Use the `trigger-action` property to customize the interaction that results in the popover opening.
         */
        "trigger"?: string;
        /**
          * Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `"click"`, the popover will be presented when the trigger is left clicked. If `"hover"`, the popover will be presented when a pointer hovers over the trigger. If `"context-menu"`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
          * @config 
          * @default "click"
         */
        "triggerAction"?: TriggerAction;
    }
    /**
     * Progress bar can be used to show the progress of a task or to show the passing of time.
     */
    interface PopProgress {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: Color;
        /**
          * @config 
          * @default 100
         */
        "max"?: number;
        /**
          * The value of a progress is analogous to the value of a `<progress>`
         */
        "value"?: number;
    }
    /**
     * Radio buttons allow the user to select one option from a set.
     */
    interface PopRadio {
        /**
          * If `true`, the element will be focused on page load.
         */
        "autoFocus"?: boolean;
        /**
          * If `true`, the radio is selected.
         */
        "checked"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPopBlur"?: (event: PopRadioCustomEvent<void>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPopFocus"?: (event: PopRadioCustomEvent<void>) => void;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The value of the radio does not mean if it's checked or not, use the `checked` property for that.  The value of a radio is analogous to the value of a `<input type="radio">`, it's only used when the radio participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface PopRadioGroup {
        /**
          * If `true`, the radios can be deselected.
          * @config 
          * @default false
         */
        "allowEmpty"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).  If the `pop-radio` as no color, it will apply to it
          * @config
         */
        "color"?: Color;
        /**
          * This property allows developers to specify a custom function for comparing objects when determining the selected option in the ion-radio-group. When not specified, the default behavior will use strict equality (===) for comparison.
          * @config
         */
        "compare"?: RadioGroupCompareFn | string | null;
        /**
          * If `true`, apply the disabled property to all `pop-radio`.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * The `popChange` event is fired when the user select an option. Unlike the ionInput event, the `popChange` event is fired when the user click on the element.
         */
        "onPopChange"?: (event: PopRadioGroupCustomEvent<RadioGroupChangeEventDetail>) => void;
        /**
          * Emitted when the `value` property has changed. This is used to ensure that `ion-radio` can respond to any value property changes from the group.
         */
        "onPopValueChange"?: (event: PopRadioGroupCustomEvent<RadioGroupChangeEventDetail>) => void;
        /**
          * If `true`, apply the required property to all `pop-radio`.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.  If the `pop-radio` as no size, it will apply to it
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    /**
     * Range slider is used to select a value by sliding a handle.
     */
    interface PopRange {
        /**
          * If `true`, the element will be focused on page load.
         */
        "autoFocus"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: RangeColor;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the ionInput event after each keystroke.
          * @config 
          * @default 0
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
          * @config 
          * @default 100
         */
        "max"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
          * @config 
          * @default 0
         */
        "min"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPopBlur"?: (event: PopRangeCustomEvent<void>) => void;
        /**
          * The `popChange` event is fired when the user modifies the input's value. Unlike the popInput event, the `popChange` event is fired when the element loses focus after its value has been modified.
         */
        "onPopChange"?: (event: PopRangeCustomEvent<RangeChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPopFocus"?: (event: PopRangeCustomEvent<void>) => void;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set.
          * @config 
          * @default 1
         */
        "step"?: number;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: number | null;
    }
    interface PopSelect {
        /**
          * If `true`, the element will be focused on page load.
         */
        "autoFocus"?: boolean;
        /**
          * if `true`, adds border to textarea when `color` property is not set.
          * @config 
          * @default false
         */
        "bordered"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: SelectColor;
        /**
          * This property allows developers to specify a custom function for comparing objects when determining the selected option in the ion-radio-group. When not specified, the default behavior will use strict equality (===) for comparison.
          * @config
         */
        "compare"?: SelectCompareFn | string | null;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Text that is placed under the textarea and displayed when no error is detected.
         */
        "helperText"?: string;
        /**
          * Only apply when `multiple` property is used. The maximum amount of values that can be selected, which must not be less than its minimum (min attribute) value.
          * @config
         */
        "max"?: number;
        /**
          * Only apply when `multiple` property is used. The minimum amount of values that can be selected, which must not be greater than its maximum (max attribute) value.
          * @config
         */
        "min"?: number;
        /**
          * If `true`, the user can enter more than one value.
          * @config 
          * @default false
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Only apply when `multiple` property is used. Text that is placed under the select and displayed when the amount of selected option is below of the `min` property.
         */
        "notEnoughErrorText"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPopBlur"?: (event: PopSelectCustomEvent<void>) => void;
        /**
          * The `popChange` event is fired when the user modifies the select's value. Unlike the ionInput event, the `popChange` event is fired when the element loses focus after its value has been modified.
         */
        "onPopChange"?: (event: PopSelectCustomEvent<SelectChangeEventDetail>) => void;
        /**
          * Emitted when the overlay is dismissed.
         */
        "onPopDismiss"?: (event: PopSelectCustomEvent<void>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPopFocus"?: (event: PopSelectCustomEvent<void>) => void;
        /**
          * Instructional text that shows before the input has a value.  This property replace the `<option disabled selected>`
         */
        "placeholder"?: string;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * The text to display instead of the selected option's value.
         */
        "selectedText"?: string;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * Only apply when `multiple` property is used. Text that is placed under the select and displayed when the amount of selected option is greater of the `max` property.
         */
        "tooManyErrorText"?: string;
        /**
          * The value of a select is analogous to the value of a `<select>`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface PopSelectOption {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the select option. This property does not apply when `interface="action-sheet"` as `ion-action-sheet` does not allow for disabled buttons.
         */
        "disabled"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
         */
        "size"?: Size;
        /**
          * The text value of the option.
         */
        "value"?: any | null;
    }
    interface PopSelectPopover {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the select accepts multiple values
         */
        "multiple"?: boolean;
        /**
          * An array of options for the popover
         */
        "options"?: SelectPopoverOption[];
        /**
          * If `true`, allow empty on radio options
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
         */
        "size"?: Size;
    }
    /**
     * Swap allows you to toggle the visibility of two elements.
     */
    interface PopSwap {
        /**
          * Activates the swap. Show whats inside the slot `on`
          * @config 
          * @default false
         */
        "active"?: boolean;
        /**
          * Emitted when the swap active attribut change
         */
        "onPopSwap"?: (event: PopSwapCustomEvent<SwapChangeEventDetail>) => void;
        /**
          * Choose what animation is used on click.
          * @config 
          * @default "rotate"
         */
        "type"?: SwapType;
    }
    /**
     * Textarea allows users to enter text in multiple lines.
     */
    interface PopTextarea {
        /**
          * This features work only on mobile and tablet devices. By default the User Agent and input make their own determination.  - `off` or `none`: No autocapitalization is applied (all letters default to lowercase) - `on` or `sentences`: The first letter of each sentence defaults to a capital letter; all other letters default to lowercase - `words`: The first letter of each word defaults to a capital letter; all other letters default to lowercase - `characters`: All letters should default to uppercase
          * @config 
          * @default "off"
         */
        "autoCapitalize"?: AutoCapitalize;
        /**
          * If `true`, the element will be focused on page load.
         */
        "autoFocus"?: boolean;
        /**
          * if `true`, adds border to textarea when `color` property is not set.
          * @config 
          * @default false
         */
        "bordered"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: TextareaColor;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
          * @config
         */
        "cols"?: number;
        /**
          * If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.
          * @config 
          * @default false
         */
        "counter"?: boolean;
        /**
          * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
          * @config
         */
        "counterFormatter"?: (inputLength: number, maxLength: number) => string;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the ionInput event after each keystroke.
          * @config 
          * @default 0
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. That specifies what action label (or icon) to present for the enter key on virtual keyboards.  - `enter`: Typically Inserting a new line. - `done`: Typically meaning there is nothing more to input and the input method editor (IME) will be closed. - `go`: Typically meaning to take the user to the target of the text they typed. - `next`: Typically taking the user to the next field that will accept text. - `previous`: Typically taking the user to the previous field that will accept text. - `search`: Typically taking the user to the results of searching for the text they have typed. - `send`: Typically delivering the text to its target.
         */
        "enterkeyhint"?: EnterKeyHint;
        /**
          * Text that is placed under the textarea and displayed when an error is detected.
         */
        "errorText"?: string;
        /**
          * Text that is placed under the textarea and displayed when no error is detected.
         */
        "helperText"?: string;
        /**
          * A hint to the browser for which virtual keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "keyboard"?: KeyboardType;
        /**
          * This attribute specifies the maximum number of characters that the user can enter.
          * @config
         */
        "maxLength"?: number;
        /**
          * This attribute specifies the minimum number of characters that the user can enter.
          * @config
         */
        "minLength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPopBlur"?: (event: PopTextareaCustomEvent<void>) => void;
        /**
          * The `popChange` event is fired when the user modifies the textarea's value. Unlike the ionInput event, the `popChange` event is fired when the element loses focus after its value has been modified.
         */
        "onPopChange"?: (event: PopTextareaCustomEvent<TextareaChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPopFocus"?: (event: PopTextareaCustomEvent<void>) => void;
        /**
          * The `popInput` event is fired each time the user modifies the textarea's value. Unlike the `popChange` event, the `popInput` event is fired for each alteration to the textarea's value. This typically happens for each keystroke as the user types.  This event can be debouced by the `debounce` property.
         */
        "onPopInput"?: (event: PopTextareaCustomEvent<TextareaInputEventDetail>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * The number of visible text lines for the control.
          * @config
         */
        "rows"?: number;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * If `true`, the element will have its spelling and grammar checked. By default the User Agent make their own default behavior.
          * @config 
          * @default false
         */
        "spellcheck"?: boolean;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.  - `soft`: Text is not to be wrapped when submitted (though can still be wrapped in the rendering). - `hard`: Text is to have newlines added by the user agent so that the text is wrapped when it is submitted.  If wrap attribute is in the `hard` state, the `cols` property must be specified.
          * @config 
          * @default "soft"
         */
        "wrap"?: Wrap;
    }
    /**
     * Toggle is a checkbox that is styled to look like a switch button.
     */
    interface PopToggle {
        /**
          * If `true`, the toggle is selected.
          * @config 
          * @default false
         */
        "checked"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"ghost"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: ToggleColor;
        /**
          * If true, the user cannot interact with the native element.
          * @config 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * If a developer want to use `indeterminate`, `checked` property should be set to `false`
          * @config 
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onPopBlur"?: (event: PopToggleCustomEvent<void>) => void;
        /**
          * Emitted when the input checked attribut change
         */
        "onPopChange"?: (event: PopToggleCustomEvent<ToggleChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onPopFocus"?: (event: PopToggleCustomEvent<void>) => void;
        /**
          * If `true`, the user cannot modify the value.
          * @config 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
          * @config 
          * @default false
         */
        "required"?: boolean;
        /**
          * Change size of the component Options are: `"xs"`, `"sm"`, `"md"`, `"lg"`.
          * @config 
          * @default "md"
         */
        "size"?: Size;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: string | null;
    }
    /**
     * Tooltip can be used to show a message when hovering over an element.
     */
    interface PopTooltip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"accent"`, `"info"`, `"success"`, `"warning"`, `"error"`. For more information on colors, see [theming](/docs/theming/basics).
          * @config
         */
        "color"?: Color;
        /**
          * Force open tooltip
          * @config 
          * @default false
         */
        "open"?: boolean;
        /**
          * Define the position of tooltip By default the tootip appear on top
          * @config 
          * @default "top"
         */
        "position"?: TooltipPosition;
        /**
          * Text to show on hover
         */
        "value": string;
    }
    interface IntrinsicElements {
        "pop-accordion": PopAccordion;
        "pop-accordion-group": PopAccordionGroup;
        "pop-avatar": PopAvatar;
        "pop-badge": PopBadge;
        "pop-button": PopButton;
        "pop-card": PopCard;
        "pop-card-actions": PopCardActions;
        "pop-card-body": PopCardBody;
        "pop-card-title": PopCardTitle;
        "pop-checkbox": PopCheckbox;
        "pop-divider": PopDivider;
        "pop-drawer": PopDrawer;
        "pop-dropdown": PopDropdown;
        "pop-img": PopImg;
        "pop-indicator": PopIndicator;
        "pop-input": PopInput;
        "pop-input-file": PopInputFile;
        "pop-item": PopItem;
        "pop-join": PopJoin;
        "pop-kbd": PopKbd;
        "pop-list": PopList;
        "pop-loading": PopLoading;
        "pop-mask": PopMask;
        "pop-modal": PopModal;
        "pop-navbar": PopNavbar;
        "pop-popover": PopPopover;
        "pop-progress": PopProgress;
        "pop-radio": PopRadio;
        "pop-radio-group": PopRadioGroup;
        "pop-range": PopRange;
        "pop-select": PopSelect;
        "pop-select-option": PopSelectOption;
        "pop-select-popover": PopSelectPopover;
        "pop-swap": PopSwap;
        "pop-textarea": PopTextarea;
        "pop-toggle": PopToggle;
        "pop-tooltip": PopTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Accordion is used for showing and hiding content.
             */
            "pop-accordion": LocalJSX.PopAccordion & JSXBase.HTMLAttributes<HTMLPopAccordionElement>;
            "pop-accordion-group": LocalJSX.PopAccordionGroup & JSXBase.HTMLAttributes<HTMLPopAccordionGroupElement>;
            /**
             * Avatars are used to show a thumbnail representation of an individual or business in the interface.
             */
            "pop-avatar": LocalJSX.PopAvatar & JSXBase.HTMLAttributes<HTMLPopAvatarElement>;
            /**
             * Badges are used to inform the user of the status of specific data.
             */
            "pop-badge": LocalJSX.PopBadge & JSXBase.HTMLAttributes<HTMLPopBadgeElement>;
            /**
             * Buttons allow the user to take actions or make choices.
             */
            "pop-button": LocalJSX.PopButton & JSXBase.HTMLAttributes<HTMLPopButtonElement>;
            /**
             * Cards are used to group and display content in a way that is easily readable.
             */
            "pop-card": LocalJSX.PopCard & JSXBase.HTMLAttributes<HTMLPopCardElement>;
            /**
             * Cards are used to group and display content in a way that is easily readable.
             */
            "pop-card-actions": LocalJSX.PopCardActions & JSXBase.HTMLAttributes<HTMLPopCardActionsElement>;
            /**
             * Cards are used to group and display content in a way that is easily readable.
             */
            "pop-card-body": LocalJSX.PopCardBody & JSXBase.HTMLAttributes<HTMLPopCardBodyElement>;
            /**
             * Cards are used to group and display content in a way that is easily readable.
             */
            "pop-card-title": LocalJSX.PopCardTitle & JSXBase.HTMLAttributes<HTMLPopCardTitleElement>;
            /**
             * Toggles are switches that change the state of a single option.
             * They can be switched on or off by pressing.
             * Toggles can also be `"checked"` programmatically by setting the checked property.
             */
            "pop-checkbox": LocalJSX.PopCheckbox & JSXBase.HTMLAttributes<HTMLPopCheckboxElement>;
            /**
             * Divider will be used to separate content vertically or horizontally.
             */
            "pop-divider": LocalJSX.PopDivider & JSXBase.HTMLAttributes<HTMLPopDividerElement>;
            /**
             * Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page.
             */
            "pop-drawer": LocalJSX.PopDrawer & JSXBase.HTMLAttributes<HTMLPopDrawerElement>;
            /**
             * Describe whats does the component
             */
            "pop-dropdown": LocalJSX.PopDropdown & JSXBase.HTMLAttributes<HTMLPopDropdownElement>;
            "pop-img": LocalJSX.PopImg & JSXBase.HTMLAttributes<HTMLPopImgElement>;
            /**
             * Indicators are used to place an element on the corner of another element.
             */
            "pop-indicator": LocalJSX.PopIndicator & JSXBase.HTMLAttributes<HTMLPopIndicatorElement>;
            /**
             * Textarea allows users to enter text in multiple lines.
             */
            "pop-input": LocalJSX.PopInput & JSXBase.HTMLAttributes<HTMLPopInputElement>;
            /**
             * Textarea allows users to enter text in multiple lines.
             */
            "pop-input-file": LocalJSX.PopInputFile & JSXBase.HTMLAttributes<HTMLPopInputFileElement>;
            "pop-item": LocalJSX.PopItem & JSXBase.HTMLAttributes<HTMLPopItemElement>;
            /**
             * Join is a container for grouping multiple items, it can be used to group buttons, inputs, or any other element.
             * Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items.
             */
            "pop-join": LocalJSX.PopJoin & JSXBase.HTMLAttributes<HTMLPopJoinElement>;
            /**
             * Kbd is used to display keyboard shortcuts.
             */
            "pop-kbd": LocalJSX.PopKbd & JSXBase.HTMLAttributes<HTMLPopKbdElement>;
            "pop-list": LocalJSX.PopList & JSXBase.HTMLAttributes<HTMLPopListElement>;
            /**
             * Loading shows an animation to indicate that something is loading.
             */
            "pop-loading": LocalJSX.PopLoading & JSXBase.HTMLAttributes<HTMLPopLoadingElement>;
            /**
             * Mask crops the content of the element to common shapes.
             */
            "pop-mask": LocalJSX.PopMask & JSXBase.HTMLAttributes<HTMLPopMaskElement>;
            /**
             * Describe whats does the component
             */
            "pop-modal": LocalJSX.PopModal & JSXBase.HTMLAttributes<HTMLPopModalElement>;
            /**
             * Navbar is used to show a navigation bar on the top of the page.
             */
            "pop-navbar": LocalJSX.PopNavbar & JSXBase.HTMLAttributes<HTMLPopNavbarElement>;
            "pop-popover": LocalJSX.PopPopover & JSXBase.HTMLAttributes<HTMLPopPopoverElement>;
            /**
             * Progress bar can be used to show the progress of a task or to show the passing of time.
             */
            "pop-progress": LocalJSX.PopProgress & JSXBase.HTMLAttributes<HTMLPopProgressElement>;
            /**
             * Radio buttons allow the user to select one option from a set.
             */
            "pop-radio": LocalJSX.PopRadio & JSXBase.HTMLAttributes<HTMLPopRadioElement>;
            "pop-radio-group": LocalJSX.PopRadioGroup & JSXBase.HTMLAttributes<HTMLPopRadioGroupElement>;
            /**
             * Range slider is used to select a value by sliding a handle.
             */
            "pop-range": LocalJSX.PopRange & JSXBase.HTMLAttributes<HTMLPopRangeElement>;
            "pop-select": LocalJSX.PopSelect & JSXBase.HTMLAttributes<HTMLPopSelectElement>;
            "pop-select-option": LocalJSX.PopSelectOption & JSXBase.HTMLAttributes<HTMLPopSelectOptionElement>;
            "pop-select-popover": LocalJSX.PopSelectPopover & JSXBase.HTMLAttributes<HTMLPopSelectPopoverElement>;
            /**
             * Swap allows you to toggle the visibility of two elements.
             */
            "pop-swap": LocalJSX.PopSwap & JSXBase.HTMLAttributes<HTMLPopSwapElement>;
            /**
             * Textarea allows users to enter text in multiple lines.
             */
            "pop-textarea": LocalJSX.PopTextarea & JSXBase.HTMLAttributes<HTMLPopTextareaElement>;
            /**
             * Toggle is a checkbox that is styled to look like a switch button.
             */
            "pop-toggle": LocalJSX.PopToggle & JSXBase.HTMLAttributes<HTMLPopToggleElement>;
            /**
             * Tooltip can be used to show a message when hovering over an element.
             */
            "pop-tooltip": LocalJSX.PopTooltip & JSXBase.HTMLAttributes<HTMLPopTooltipElement>;
        }
    }
}
