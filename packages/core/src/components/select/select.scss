@use "@poppy/utils/input";
@use "@poppy/utils/join-item";
@use "@poppy/global" as theme;

/**
 * @prop --border-radius: Border radius for select trigger and content
 * @prop --border-color: Border color for select trigger and content when `bordered` is set
 * @prop --outline-color: Outline color for focused select trigger, `--border-color` is used as fallback
 *
 * @prop --background: Background color for trgger and content
 * @prop --opacity: Change background opacity
 *
 * @prop --color: Change text color
 *
 * @prop --max-height: Change max-height for dropdown content (apply only when screen width is more than 640px)
 */

@include join-item.item(".dropdown > .dropdown-trigger");

// Select
// ----------------------------------------------------------------

$minWidth: 12rem;
:host {
  --border-radius: #{theme.use_radius(md)};
  --border-color: transparent;
  --outline-color: #{theme.use_color("base.content", 0.2)};
  --background: #{theme.use_color("base.100", var(--opacity, 1))};
  --color: #{theme.use_color("base.content")};

  @include input.label;
  @include input.helper;

  display: inline-flex;
  flex-direction: column;
  min-width: $minWidth;

  .dropdown {
    display: grid;
    position: relative;
    width: 100%;

    &[open] {
      svg {
        transform: rotateX(180deg);
      }

      .dropdown-content {
        pointer-events: all;
        opacity: 1;
        transform: rotateX(0);
      }
    }

    &-trigger {
      display: flex;
      position: relative;
      align-items: center;
      overflow: hidden;
      border-width: 1px;
      border-style: solid;
      border-radius: var(--border-radius);
      border-color: var(--border-color, #{theme.use_color("base.content", 0.2)});
      background-color: var(--background);

      cursor: pointer;

      &:focus-visible {
        outline-color: var(--outline-color, var(--border-color));
        outline-style: solid;
        outline-width: 2px;
        outline-offset: 2px;
      }

      > div {
        user-select: none;
      }
    }

    &-content {
      pointer-events: none;
      position: absolute;
      z-index: 20;
      opacity: 0;

      display: block;

      min-height: 2rem;
      max-height: var(--max-height, 20rem);
      overflow-y: auto;
      width: 100%;

      margin-block: 2px;
      border: 1px solid theme.use_color("base.content", 0.2);
      border-radius: var(--border-radius);
      border-color: var(--border-color, transparent);
      box-shadow: theme.use_shadow(md);
      background-color: var(--background);

      color: var(--color);
      perspective: 200px;
      transform: rotateX(28deg);
      transform-style: preserve-3d;
      transition: 150ms ease-in 0s;
    }

    &-backdrop {
      display: none;
    }
  }

  .select-placeholder {
    opacity: 0.7;
  }

  .text-wrapper {
    transition: opacity 150ms ease 0ms;
  }

  svg {
    min-width: 24px;
    margin-inline-start: auto;
    transition: transform 200ms ease 0ms;
  }

  pop-list {
    width: auto;
  }
}

@media screen and (max-width: 640px) {
  :host .dropdown {
    position: inherit;

    &-content {
      max-height: calc(100dvh - 2rem);

      width: auto;
      top: 50%;
      left: 2rem;
      right: 2rem;

      transform: translateY(-50%);
    }

    &-backdrop {
      display: block;
      position: fixed;
      z-index: 10;

      inset: 0;

      background: theme.use_color("neutral.base", 0.2);
    }
  }

}

:host([bordered]) {
  --border-color: #{theme.use_color("base.content", 0.2)};
}

// Select Slot
// ----------------------------------------------------------------

::slotted([slot="start"]),
::slotted([slot="end"]) {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

// Select Size
// ----------------------------------------------------------------

:host([size="xs"]) .dropdown-trigger {
  min-height: 1.5rem;
  padding-inline-start: 0.65rem;
  padding-inline-end: 0.5rem;
  font-size: 0.75rem;
  line-height: 1.625;
}
:host([size="sm"]) .dropdown-trigger {
  min-height: 2rem;
  padding-inline-start: 0.75rem;
  padding-inline-end: 0.85rem;
  font-size: 0.875rem;
  line-height: 2rem;
}
:host([size="md"]),
:host(:not([size])) {
  .dropdown-trigger {
    min-height: 3rem;
    padding-inline-start: 1rem;
    padding-inline-end: 1.15rem;
    font-size: 0.875rem;
    line-height: 2;
  }
}
:host([size="lg"]) .dropdown-trigger {
  min-height: 4rem;
  padding-inline-start: 1.15rem;
  padding-inline-end: 1.35rem;
  font-size: 1.125rem;
  line-height: 2;
}

// Select Color
// ----------------------------------------------------------------

@mixin generate-color($colors...) {
  @each $color in $colors {
    $base: theme.use_color("#{$color}.base");

    :host([color="#{$color}"]) {
      --border-color: #{$base};
      --outline-color: #{$base};
    }
  }
}
@include generate-color(primary, secondary, accent, info, success, warning, error);

:host([color="ghost"]) {
  --opacity: 0.05;
}
:host([color="ghost"]:focus) {
  --opacity: 1;
}
:host(.select-expanded[color="ghost"]) {
  --opacity: 1;
}

// Select State
// ----------------------------------------------------------------

:host([readonly]) .dropdown-trigger {
  $base: theme.use_color("base.200");
  $neutral: theme.use_color("neutral.base");
  $text: theme.use_color("base.content", 0.8);

  --background: #{$base};
  --border-color: #{$neutral};
  --color: #{$text};

  cursor: unset;
}
:host([disabled]) .dropdown-trigger {
  $base: theme.use_color("base.200");
  $text: theme.use_color("base.content", 0.2);

  --background: #{$base};
  --border-color: #{$base};
  --color: #{$text};

  cursor: not-allowed;
}
