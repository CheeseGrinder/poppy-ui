@use "@poppy/utils/input";
@use "@poppy/utils/join-item";
@use "@poppy/global" as theme;

/**
 * @prop --border-radius: Border radius
 * @prop --border-color: Border color & outline color
 *
 * @prop --background: Background color
 * @prop --opacity: Change background opacity
 *
 * @prop --color: Change text color
 * @prop --error-color: Change error text color
 */

$minWidth: 12rem;

// @include join-item.item(".select-wrapper");
@include join-item.item(".select-wrapper", ".select-wrapper button");

:host {
  --opacity: 1;
  --background: #{theme.use_color("base.100", var(--opacity))};
  --border-color: #{theme.use_color("base.content", 0.2)};
  --border-radius: #{theme.use_radius(md)};
  --color: #{theme.use_color("base.content")};

  @include input.label;
  @include input.helper;

  display: inline-flex;
  flex-direction: column;
  min-width: $minWidth;

  .select-wrapper {
    display: flex;
    position: relative;
    align-items: center;

    overflow: hidden;
    border-radius: var(--border-radius);
    background-color: var(--background);

    &:has(button:focus-visible) {
      outline-color: var(--border-color);
      outline-style: solid;
      outline-width: 2px;
      outline-offset: 2px;
    }
  }

  .select-placeholder {
    opacity: 0.6;
  }

  .text-wrapper {
    transition: opacity 150ms ease 0ms;
  }

  button {
    z-index: 1;
    position: absolute;

    width: 100%;
    inset: 0;
    border-width: 1px;

    border-style: solid;
    border-radius: var(--border-radius);
    border-color: var(--border-color, transparent);
    outline: none;

    background-color: transparent;
    color: var(--color);

    user-select: none;
  }

  svg {
    margin-inline-start: auto;
    transition: transform 150ms ease 0ms;
  }
}

:host(.select-expanded) {
  .select-wrapper {
    box-shadow: use_shadow(md);

    svg {
      transform: rotateX(180deg);
    }
  }
}

:host([bordered]) {
  --border-color: #{theme.use_color("base.content", 0.2)};
}

// Color
@mixin generate-color($colors...) {
  @each $color in $colors {
    $base: theme.use_color("#{$color}.base");

    :host([color="#{$color}"]) {
      --border-color: #{$base};
    }
  }
}
@include generate-color(primary, secondary, accent, info, success, warning, error);

:host([color="ghost"]) {
  --opacity: 0.05;

  .select-wrapper:has(button:focus-visible) {
    --opacity: 1;
  }
}

:host(.select-expanded[color="ghost"]) {
  .select-wrapper {
    --opacity: 1;
  }
}

// Size
:host([size="xs"]) .select-wrapper {
  height: 1.5rem;
  padding-inline-start: 0.65rem;
  padding-inline-end: 0.5rem;
  font-size: 0.75rem;
  line-height: 1.625;
}
:host([size="sm"]) .select-wrapper {
  height: 2rem;
  padding-inline-start: 0.75rem;
  padding-inline-end: 0.85rem;
  font-size: 0.875rem;
  line-height: 2rem;
}
:host([size="md"]),
:host(:not([size])) {
  .select-wrapper {
    height: 3rem;
    padding-inline-start: 1rem;
    padding-inline-end: 1.15rem;
    font-size: 0.875rem;
    line-height: 2;
  }
}
:host([size="lg"]) .select-wrapper {
  height: 4rem;
  padding-inline-start: 1.15rem;
  padding-inline-end: 1.35rem;
  font-size: 1.125rem;
  line-height: 2;
}

:host([disabled]) button {
  $base: theme.use_color("base.200");
  $text: theme.use_color("base.content", 0.2);

  --background: #{$base};
  --border-color: #{$base};
  --color: #{$text};

  cursor: not-allowed;

  &::placeholder {
    color: #{$text};
  }
}
