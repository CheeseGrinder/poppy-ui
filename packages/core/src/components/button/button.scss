@use "@poppy/utils/join-item";
@use "@poppy/global" as theme;

/**
 * @prop --border-radius: Change border radius
 * @prop --border-color: Change border color
 *
 * @prop --background: Change background color
 * @prop --color: Change text color
 *
 * @prop --animation: Change animation duration
 * @prop --focus-scale: Change scale transformation when the button is active
 *
 */

@include join-item.item(button);

// Button
// ----------------------------------------------------------------

:host {
  --border-radius: #{theme.use_radius(md)};
  --border-color: transparent;
  --background: #{theme.use_color("base.200")};
  --color: #{theme.use_color("base.content")};

  --animation: 0.25s ease-out;
  --focus-scale: 0.97;

  display: inline-block;

  button {
    box-sizing: border-box;
    display: inline-flex;
    flex-shrink: 0;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    width: 100%;
    gap: 0.5rem;

    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    outline-color: var(--background);

    background-color: var(--background);

    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    color: var(--color);

    font-weight: 600;
    line-height: 1em;
    text-align: center;
    text-decoration-line: none;
    text-rendering: optimizeLegibility;

    animation: button-pop var(--animation);
    transition-duration: 200ms;
    transition-property: color, background-color, border-color, opacity, box-shadow, transform;
    transition-timing-function: ease-out;

    user-select: none;

    &:hover {
      cursor: pointer;
    }

    &:active:hover,
    &:active:focus {
      transform: scale(var(--focus-scale));
      animation: button-pop 0s ease-out;
    }

    &:focus-visible {
      outline-style: solid;
      outline-width: 2px;
      outline-offset: 2px;
    }
  }

  @keyframes button-pop {
    0% {
      transform: scale(var(--focus-scale));
    }

    40% {
      transform: scale(1.02);
    }

    100% {
      transform: scale(1);
    }
  }
}

// Button Size
// ----------------------------------------------------------------

:host([size="xs"]) button {
  height: 1.5rem;
  min-height: 1.5rem;
  padding-right: 0.5rem;
  padding-left: 0.5rem;
  font-size: 0.75rem;
}

:host([size="sm"]) button {
  height: 2rem;
  min-height: 2rem;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
  font-size: 0.875rem;
}

:host([size="md"]) button {
  height: 3rem;
  min-height: 3rem;
  padding-right: 1rem;
  padding-left: 1rem;
  font-size: 0.875rem;
}

:host([size="lg"]) button {
  height: 4rem;
  min-height: 4rem;
  padding-right: 1.5rem;
  padding-left: 1.5rem;
  font-size: 1.125rem;
}

// Button Color
// ----------------------------------------------------------------

@mixin generate-color($colors...) {
  @each $color in $colors {
    $base: theme.use_color("#{$color}.base");
    $text: theme.use_color("#{$color}.content");

    :host([color="#{$color}"]) {
      --background: #{$base};
      --color: #{$text};

      button {

        &:hover,
        &.btn-active {
          --background: color-mix(in oklab, #{$base}, black 10%);
        }
      }
    }
  }
}

@include generate-color(neutral, primary, secondary, accent, info, success, warning, error);

:host([color="ghost"]:not([outlined])) {
  --background: transparent;
  --color: currentColor;

  button {
    outline-color: currentColor;

    &:hover,
    &.btn-active {
      --background: #{theme.use_color("base.content", 0.2)};
    }
  }
}

:host(:not([color], [outlined])) {
  --background: #{theme.use_color("base.200")};
  --color: #{theme.use_color("base.content")};

  button {
    outline-color: #{theme.use_color("base.content")};

    &:hover,
    &.btn-active {
      --background: #{theme.use_color("base.300")};
    }
  }
}

// Button Outlined
// ----------------------------------------------------------------

:host([outlined]) {
  button {
    box-shadow: none;

    &:not(:hover, .btn-active) {
      border-color: currentColor;
      background-color: transparent;
      color: var(--background);
    }

    &:hover,
    &.btn-active {
      border-color: transparent;
    }
  }
}

:host(:not([color])[outlined]) {
  --background: #{theme.use_color("base.content")};

  button {

    &:hover,
    &.btn-active {
      --background: #{theme.use_color("base.content")};
      --color: #{theme.use_color("base.200")};
    }
  }
}

// Button Expand
// ----------------------------------------------------------------

:host([expand="block"]) {
  width: 100%;
}

:host([expand="wide"]) button {
  width: 16rem;
}

// Button Shape
// ----------------------------------------------------------------

:host([shape="square"]),
:host([shape="circle"]) {
  button {
    aspect-ratio: 1 / 1;
    padding: 0;
  }
}

:host([shape="circle"]) {
  --border-radius: #{theme.use_radius(full)};
}

// Button State
// ----------------------------------------------------------------

:host([disabled]) {
  cursor: not-allowed;

  button:disabled {
    --background: #{theme.use_color("neutral.base", 0.2)};
    color: #{theme.use_color("base.content", 0.2)};

    pointer-events: none;
  }
}
