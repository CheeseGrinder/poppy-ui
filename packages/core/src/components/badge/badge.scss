@use "@poppy/global" as theme;

/**
 * @prop --border-radius: Border radius
 * @prop --border-color: Border color
 *
 * @prop --background: Color of the background
 *
 * @prop --color: Color of the text
 */

// Badge
// ----------------------------------------------------------------

:host {
  --border-radius: #{theme.use_radius(full)};
  --border-color: #{theme.use_color("base.200")};
  --background: #{theme.use_color("base.100")};
  --color: #{theme.use_color("base.content")};

  display: inline-flex;
  width: max-content;

  > .badge {
    box-sizing: border-box;
    display: inline-flex;
    align-items: center;
    justify-content: center;

    width: fit-content;
    height: 100%;

    border: solid 1px var(--border-color);
    border-radius: var(--border-radius);
    background-color: var(--background);
    color: var(--color);
    transition-duration: 0.2s;

    transition-property:
      color,
      background-color,
      border-color,
      text-decoration-color,
      fill,
      stroke,
      opacity,
      box-shadow,
      transform,
      filter,
      backdrop-filter,
      -webkit-backdrop-filter;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

// Badge Size
// ----------------------------------------------------------------

:host([size="xs"]) {
  height: 0.75rem;

  > .badge {
    padding-right: 0.313rem;

    padding-left: 0.313rem;
    font-size: 0.75rem;
    line-height: 0.75rem;
  }
}
:host([size="sm"]) {
  height: 1rem;

  > .badge {
    padding-right: 0.438rem;

    padding-left: 0.438rem;
    font-size: 0.75rem;
    line-height: 1rem;
  }
}
:host([size="md"]) {
  height: 1.25rem;

  > .badge {
    padding-right: 0.563rem;

    padding-left: 0.563rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
  }
}
:host([size="lg"]) {
  height: 1.5rem;

  > .badge {
    padding-right: 0.688rem;

    padding-left: 0.688rem;
    font-size: 1rem;
    line-height: 1.5rem;
  }
}

// Badge Color
// ----------------------------------------------------------------

@mixin generate-color($colors...) {
  @each $color in $colors {
    $base: use_color("#{$color}.base");
    $text: use_color("#{$color}.content");

    :host([color="#{$color}"]) {
      --border-color: #{$base};
      --background: #{$base};
      --color: #{$text};
    }
    :host([color="#{$color}"][outlined]) {
      --color: #{$base};
    }
  }
}
@include generate-color(neutral, primary, secondary, accent, info, success, warning, error);

:host(:not([color], [outlined])) {
  --border-color: #{theme.use_color("base.200")};
  --background: #{theme.use_color("base.100")};
  --color: #{theme.use_color("base.content")};
}

// Badge Outline
// ----------------------------------------------------------------

:host([outlined]) {
  --border-color: currentColor;
  --background: transparent;
}
