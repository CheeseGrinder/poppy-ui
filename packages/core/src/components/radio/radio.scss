@use "@poppy/utils/input";
@use "@poppy/global" as theme;

/**
 * @prop --border-radius: Border radius
 * @prop --border-color: Border color
 * @prop --border-opacity: Border opacity
 *
 * @prop --background: Background color
 * @prop --opacity: Change background opacity
 *
 * @prop --animation-duration: Animation duration
 */

// Radio
// ----------------------------------------------------------------

$base: use_color("base.100");

:host {
  --border-radius: #{theme.use_radius(full)};
  --border-opacity: 0.2;
  --border-color: #{theme.use_color("base.content", var(--border-opacity))};
  --background: #{theme.use_color("base.content")};

  @include input.label;

  display: inline-flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: space-between;
  gap: 4px;

  outline: none;

  > input {
    appearance: none;

    margin: 0;
    margin-inline-start: auto;
    border-width: 1px;
    border-style: solid;
    border-radius: var(--border-radius);
    border-color: var(--border-color);
    cursor: pointer;

    &:focus {
      box-shadow: none;
    }
    &:focus-visible {
      --border-opacity: 1;
      outline-color: var(--border-color);
      outline-style: solid;
      outline-width: 2px;
      outline-offset: 2px;
    }
    &:checked {
      background-image: none;
      background-color: var(--background);

      box-shadow:
        0 0 0 4px var(--shadow, #{$base}) inset,
        0 0 0 4px var(--shadow, #{$base}) inset;
      animation: radiomark var(--animation-duration, 0.2s) ease-out;
    }
  }

  @keyframes radiomark {
    0% {
      box-shadow:
        0 0 0 12px var(--shadow, #{$base}) inset,
        0 0 0 12px var(--shadow, #{$base}) inset;
    }
    50% {
      box-shadow:
        0 0 0 3px var(--shadow, #{$base}) inset,
        0 0 0 3px var(--shadow, #{$base}) inset;
    }
    100% {
      box-shadow:
        0 0 0 4px var(--shadow, #{$base}) inset,
        0 0 0 4px var(--shadow, #{$base}) inset;
    }
  }
}

// Radio size
// ----------------------------------------------------------------

:host([size="xs"]),
:host-context(pop-list[size="xs"]) {
  > input {
    width: 1rem;
    height: 1rem;
  }
}
:host([size="sm"]),
:host-context(pop-list[size="sm"]) {
  > input {
    width: 1.25rem;
    height: 1.25rem;
  }
}
:host([size="md"]),
:host(:not([size])) {
  > input {
    width: 1.5rem;
    height: 1.5rem;
  }
}
:host([size="lg"]),
:host-context(pop-list[size="lg"]) {
  > input {
    width: 2rem;
    height: 2rem;
  }
}

// Radio colors
// ----------------------------------------------------------------

@mixin generate-color($colors...) {
  @each $color in $colors {
    $border: use_color("#{$color}.base", var(--border-opacity, 1));
    $background: use_color("#{$color}.base", var(--opacity, 1));

    :host([color="#{$color}"]) {
      --border-color: #{$base};
      --background: #{$background};
    }
  }
}
@include generate-color(primary, secondary, accent, info, success, warning, error);

:host(:not([color])) {
  $border: use_color("base.content", var(--border-opacity, 1));
  $background: use_color("base.content", var(--opacity, 1));

  --border-color: #{$border};
  --background: #{$background};
}

// Radio state
// ----------------------------------------------------------------

:host([disabled]) {
  --border-color: #{theme.use_color("base.content")};
  --background: #{theme.use_color("base.content")};

  > input {
    cursor: not-allowed;
    opacity: var(--opacity, 0.2);
  }
}

// Radio Context
// ----------------------------------------------------------------

:host-context(pop-item) {
  grid-column: span 2;

  > .label {
    padding-inline-start: 0;
  }
}
:host-context(pop-list[size="xs"]) > .label {
  padding-top: 2px;
  padding-bottom: 2px;
}
:host-context(pop-list[size="sm"]) > .label {
  padding-top: 4px;
  padding-bottom: 4px;
}
