'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type AccordionGroupChangeEventDetail, type CheckboxChangeEventDetail, type InputChangeEventDetail, type InputFileChangeEventDetail, type InputInputEventDetail, type PopAccordionGroupCustomEvent, type PopCheckboxCustomEvent, type PopInputCustomEvent, type PopInputFileCustomEvent, type PopRadioGroupCustomEvent, type PopRangeCustomEvent, type PopSelectCustomEvent, type PopSwapCustomEvent, type PopTextareaCustomEvent, type PopToggleCustomEvent, type RadioGroupChangeEventDetail, type RangeChangeEventDetail, type SelectChangeEventDetail, type SwapChangeEventDetail, type TextareaChangeEventDetail, type TextareaInputEventDetail, type ToggleChangeEventDetail } from "@poppy-ui/core";
import { PopAccordionGroup as PopAccordionGroupElement, defineCustomElement as definePopAccordionGroup } from "@poppy-ui/core/components/pop-accordion-group.js";
import { PopAccordion as PopAccordionElement, defineCustomElement as definePopAccordion } from "@poppy-ui/core/components/pop-accordion.js";
import { PopAvatar as PopAvatarElement, defineCustomElement as definePopAvatar } from "@poppy-ui/core/components/pop-avatar.js";
import { PopBadge as PopBadgeElement, defineCustomElement as definePopBadge } from "@poppy-ui/core/components/pop-badge.js";
import { PopButton as PopButtonElement, defineCustomElement as definePopButton } from "@poppy-ui/core/components/pop-button.js";
import { PopCardActions as PopCardActionsElement, defineCustomElement as definePopCardActions } from "@poppy-ui/core/components/pop-card-actions.js";
import { PopCardBody as PopCardBodyElement, defineCustomElement as definePopCardBody } from "@poppy-ui/core/components/pop-card-body.js";
import { PopCardTitle as PopCardTitleElement, defineCustomElement as definePopCardTitle } from "@poppy-ui/core/components/pop-card-title.js";
import { PopCard as PopCardElement, defineCustomElement as definePopCard } from "@poppy-ui/core/components/pop-card.js";
import { PopCheckbox as PopCheckboxElement, defineCustomElement as definePopCheckbox } from "@poppy-ui/core/components/pop-checkbox.js";
import { PopDivider as PopDividerElement, defineCustomElement as definePopDivider } from "@poppy-ui/core/components/pop-divider.js";
import { PopDrawer as PopDrawerElement, defineCustomElement as definePopDrawer } from "@poppy-ui/core/components/pop-drawer.js";
import { PopDropdown as PopDropdownElement, defineCustomElement as definePopDropdown } from "@poppy-ui/core/components/pop-dropdown.js";
import { PopImg as PopImgElement, defineCustomElement as definePopImg } from "@poppy-ui/core/components/pop-img.js";
import { PopIndicator as PopIndicatorElement, defineCustomElement as definePopIndicator } from "@poppy-ui/core/components/pop-indicator.js";
import { PopInputFile as PopInputFileElement, defineCustomElement as definePopInputFile } from "@poppy-ui/core/components/pop-input-file.js";
import { PopInput as PopInputElement, defineCustomElement as definePopInput } from "@poppy-ui/core/components/pop-input.js";
import { PopItem as PopItemElement, defineCustomElement as definePopItem } from "@poppy-ui/core/components/pop-item.js";
import { PopJoin as PopJoinElement, defineCustomElement as definePopJoin } from "@poppy-ui/core/components/pop-join.js";
import { PopKbd as PopKbdElement, defineCustomElement as definePopKbd } from "@poppy-ui/core/components/pop-kbd.js";
import { PopList as PopListElement, defineCustomElement as definePopList } from "@poppy-ui/core/components/pop-list.js";
import { PopLoading as PopLoadingElement, defineCustomElement as definePopLoading } from "@poppy-ui/core/components/pop-loading.js";
import { PopMask as PopMaskElement, defineCustomElement as definePopMask } from "@poppy-ui/core/components/pop-mask.js";
import { PopModal as PopModalElement, defineCustomElement as definePopModal } from "@poppy-ui/core/components/pop-modal.js";
import { PopNavbar as PopNavbarElement, defineCustomElement as definePopNavbar } from "@poppy-ui/core/components/pop-navbar.js";
import { PopPopover as PopPopoverElement, defineCustomElement as definePopPopover } from "@poppy-ui/core/components/pop-popover.js";
import { PopProgress as PopProgressElement, defineCustomElement as definePopProgress } from "@poppy-ui/core/components/pop-progress.js";
import { PopRadioGroup as PopRadioGroupElement, defineCustomElement as definePopRadioGroup } from "@poppy-ui/core/components/pop-radio-group.js";
import { PopRadio as PopRadioElement, defineCustomElement as definePopRadio } from "@poppy-ui/core/components/pop-radio.js";
import { PopRange as PopRangeElement, defineCustomElement as definePopRange } from "@poppy-ui/core/components/pop-range.js";
import { PopSelectOption as PopSelectOptionElement, defineCustomElement as definePopSelectOption } from "@poppy-ui/core/components/pop-select-option.js";
import { PopSelect as PopSelectElement, defineCustomElement as definePopSelect } from "@poppy-ui/core/components/pop-select.js";
import { PopSwap as PopSwapElement, defineCustomElement as definePopSwap } from "@poppy-ui/core/components/pop-swap.js";
import { PopTextarea as PopTextareaElement, defineCustomElement as definePopTextarea } from "@poppy-ui/core/components/pop-textarea.js";
import { PopToggle as PopToggleElement, defineCustomElement as definePopToggle } from "@poppy-ui/core/components/pop-toggle.js";
import { PopTooltip as PopTooltipElement, defineCustomElement as definePopTooltip } from "@poppy-ui/core/components/pop-tooltip.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type PopAccordionEvents = NonNullable<unknown>;

export const PopAccordion: StencilReactComponent<PopAccordionElement, PopAccordionEvents> = /*@__PURE__*/ createComponent<PopAccordionElement, PopAccordionEvents>({
    tagName: 'pop-accordion',
    elementClass: PopAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopAccordionEvents,
    defineCustomElement: definePopAccordion
});

type PopAccordionGroupEvents = { onPopChange: EventName<PopAccordionGroupCustomEvent<AccordionGroupChangeEventDetail>> };

export const PopAccordionGroup: StencilReactComponent<PopAccordionGroupElement, PopAccordionGroupEvents> = /*@__PURE__*/ createComponent<PopAccordionGroupElement, PopAccordionGroupEvents>({
    tagName: 'pop-accordion-group',
    elementClass: PopAccordionGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onPopChange: 'popChange' } as PopAccordionGroupEvents,
    defineCustomElement: definePopAccordionGroup
});

type PopAvatarEvents = NonNullable<unknown>;

export const PopAvatar: StencilReactComponent<PopAvatarElement, PopAvatarEvents> = /*@__PURE__*/ createComponent<PopAvatarElement, PopAvatarEvents>({
    tagName: 'pop-avatar',
    elementClass: PopAvatarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopAvatarEvents,
    defineCustomElement: definePopAvatar
});

type PopBadgeEvents = NonNullable<unknown>;

export const PopBadge: StencilReactComponent<PopBadgeElement, PopBadgeEvents> = /*@__PURE__*/ createComponent<PopBadgeElement, PopBadgeEvents>({
    tagName: 'pop-badge',
    elementClass: PopBadgeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopBadgeEvents,
    defineCustomElement: definePopBadge
});

type PopButtonEvents = {
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopButton: StencilReactComponent<PopButtonElement, PopButtonEvents> = /*@__PURE__*/ createComponent<PopButtonElement, PopButtonEvents>({
    tagName: 'pop-button',
    elementClass: PopButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopButtonEvents,
    defineCustomElement: definePopButton
});

type PopCardEvents = NonNullable<unknown>;

export const PopCard: StencilReactComponent<PopCardElement, PopCardEvents> = /*@__PURE__*/ createComponent<PopCardElement, PopCardEvents>({
    tagName: 'pop-card',
    elementClass: PopCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopCardEvents,
    defineCustomElement: definePopCard
});

type PopCardActionsEvents = NonNullable<unknown>;

export const PopCardActions: StencilReactComponent<PopCardActionsElement, PopCardActionsEvents> = /*@__PURE__*/ createComponent<PopCardActionsElement, PopCardActionsEvents>({
    tagName: 'pop-card-actions',
    elementClass: PopCardActionsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopCardActionsEvents,
    defineCustomElement: definePopCardActions
});

type PopCardBodyEvents = NonNullable<unknown>;

export const PopCardBody: StencilReactComponent<PopCardBodyElement, PopCardBodyEvents> = /*@__PURE__*/ createComponent<PopCardBodyElement, PopCardBodyEvents>({
    tagName: 'pop-card-body',
    elementClass: PopCardBodyElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopCardBodyEvents,
    defineCustomElement: definePopCardBody
});

type PopCardTitleEvents = NonNullable<unknown>;

export const PopCardTitle: StencilReactComponent<PopCardTitleElement, PopCardTitleEvents> = /*@__PURE__*/ createComponent<PopCardTitleElement, PopCardTitleEvents>({
    tagName: 'pop-card-title',
    elementClass: PopCardTitleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopCardTitleEvents,
    defineCustomElement: definePopCardTitle
});

type PopCheckboxEvents = {
    onPopChange: EventName<PopCheckboxCustomEvent<CheckboxChangeEventDetail>>,
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopCheckbox: StencilReactComponent<PopCheckboxElement, PopCheckboxEvents> = /*@__PURE__*/ createComponent<PopCheckboxElement, PopCheckboxEvents>({
    tagName: 'pop-checkbox',
    elementClass: PopCheckboxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopChange: 'popChange',
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopCheckboxEvents,
    defineCustomElement: definePopCheckbox
});

type PopDividerEvents = NonNullable<unknown>;

export const PopDivider: StencilReactComponent<PopDividerElement, PopDividerEvents> = /*@__PURE__*/ createComponent<PopDividerElement, PopDividerEvents>({
    tagName: 'pop-divider',
    elementClass: PopDividerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopDividerEvents,
    defineCustomElement: definePopDivider
});

type PopDrawerEvents = {
    onPopDidPresent: EventName<CustomEvent<void>>,
    onPopDidDismiss: EventName<CustomEvent<void>>
};

export const PopDrawer: StencilReactComponent<PopDrawerElement, PopDrawerEvents> = /*@__PURE__*/ createComponent<PopDrawerElement, PopDrawerEvents>({
    tagName: 'pop-drawer',
    elementClass: PopDrawerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopDidPresent: 'popDidPresent',
        onPopDidDismiss: 'popDidDismiss'
    } as PopDrawerEvents,
    defineCustomElement: definePopDrawer
});

type PopDropdownEvents = {
    onDidPresent: EventName<CustomEvent<void>>,
    onDidDismiss: EventName<CustomEvent<void>>
};

export const PopDropdown: StencilReactComponent<PopDropdownElement, PopDropdownEvents> = /*@__PURE__*/ createComponent<PopDropdownElement, PopDropdownEvents>({
    tagName: 'pop-dropdown',
    elementClass: PopDropdownElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDidPresent: 'didPresent',
        onDidDismiss: 'didDismiss'
    } as PopDropdownEvents,
    defineCustomElement: definePopDropdown
});

type PopImgEvents = {
    onPopWillLoad: EventName<CustomEvent<void>>,
    onPopDidLoad: EventName<CustomEvent<void>>,
    onPopError: EventName<CustomEvent<void>>
};

export const PopImg: StencilReactComponent<PopImgElement, PopImgEvents> = /*@__PURE__*/ createComponent<PopImgElement, PopImgEvents>({
    tagName: 'pop-img',
    elementClass: PopImgElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopWillLoad: 'popWillLoad',
        onPopDidLoad: 'popDidLoad',
        onPopError: 'popError'
    } as PopImgEvents,
    defineCustomElement: definePopImg
});

type PopIndicatorEvents = NonNullable<unknown>;

export const PopIndicator: StencilReactComponent<PopIndicatorElement, PopIndicatorEvents> = /*@__PURE__*/ createComponent<PopIndicatorElement, PopIndicatorEvents>({
    tagName: 'pop-indicator',
    elementClass: PopIndicatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopIndicatorEvents,
    defineCustomElement: definePopIndicator
});

type PopInputEvents = {
    onPopChange: EventName<PopInputCustomEvent<InputChangeEventDetail>>,
    onPopInput: EventName<PopInputCustomEvent<InputInputEventDetail>>,
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopInput: StencilReactComponent<PopInputElement, PopInputEvents> = /*@__PURE__*/ createComponent<PopInputElement, PopInputEvents>({
    tagName: 'pop-input',
    elementClass: PopInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopChange: 'popChange',
        onPopInput: 'popInput',
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopInputEvents,
    defineCustomElement: definePopInput
});

type PopInputFileEvents = {
    onPopChange: EventName<PopInputFileCustomEvent<InputFileChangeEventDetail>>,
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopInputFile: StencilReactComponent<PopInputFileElement, PopInputFileEvents> = /*@__PURE__*/ createComponent<PopInputFileElement, PopInputFileEvents>({
    tagName: 'pop-input-file',
    elementClass: PopInputFileElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopChange: 'popChange',
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopInputFileEvents,
    defineCustomElement: definePopInputFile
});

type PopItemEvents = NonNullable<unknown>;

export const PopItem: StencilReactComponent<PopItemElement, PopItemEvents> = /*@__PURE__*/ createComponent<PopItemElement, PopItemEvents>({
    tagName: 'pop-item',
    elementClass: PopItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopItemEvents,
    defineCustomElement: definePopItem
});

type PopJoinEvents = NonNullable<unknown>;

export const PopJoin: StencilReactComponent<PopJoinElement, PopJoinEvents> = /*@__PURE__*/ createComponent<PopJoinElement, PopJoinEvents>({
    tagName: 'pop-join',
    elementClass: PopJoinElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopJoinEvents,
    defineCustomElement: definePopJoin
});

type PopKbdEvents = NonNullable<unknown>;

export const PopKbd: StencilReactComponent<PopKbdElement, PopKbdEvents> = /*@__PURE__*/ createComponent<PopKbdElement, PopKbdEvents>({
    tagName: 'pop-kbd',
    elementClass: PopKbdElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopKbdEvents,
    defineCustomElement: definePopKbd
});

type PopListEvents = NonNullable<unknown>;

export const PopList: StencilReactComponent<PopListElement, PopListEvents> = /*@__PURE__*/ createComponent<PopListElement, PopListEvents>({
    tagName: 'pop-list',
    elementClass: PopListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopListEvents,
    defineCustomElement: definePopList
});

type PopLoadingEvents = NonNullable<unknown>;

export const PopLoading: StencilReactComponent<PopLoadingElement, PopLoadingEvents> = /*@__PURE__*/ createComponent<PopLoadingElement, PopLoadingEvents>({
    tagName: 'pop-loading',
    elementClass: PopLoadingElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopLoadingEvents,
    defineCustomElement: definePopLoading
});

type PopMaskEvents = NonNullable<unknown>;

export const PopMask: StencilReactComponent<PopMaskElement, PopMaskEvents> = /*@__PURE__*/ createComponent<PopMaskElement, PopMaskEvents>({
    tagName: 'pop-mask',
    elementClass: PopMaskElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopMaskEvents,
    defineCustomElement: definePopMask
});

type PopModalEvents = {
    onDidPresent: EventName<CustomEvent<void>>,
    onDidDismiss: EventName<CustomEvent<void>>
};

export const PopModal: StencilReactComponent<PopModalElement, PopModalEvents> = /*@__PURE__*/ createComponent<PopModalElement, PopModalEvents>({
    tagName: 'pop-modal',
    elementClass: PopModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDidPresent: 'didPresent',
        onDidDismiss: 'didDismiss'
    } as PopModalEvents,
    defineCustomElement: definePopModal
});

type PopNavbarEvents = NonNullable<unknown>;

export const PopNavbar: StencilReactComponent<PopNavbarElement, PopNavbarEvents> = /*@__PURE__*/ createComponent<PopNavbarElement, PopNavbarEvents>({
    tagName: 'pop-navbar',
    elementClass: PopNavbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopNavbarEvents,
    defineCustomElement: definePopNavbar
});

type PopPopoverEvents = {
    onWillPresent: EventName<CustomEvent<void>>,
    onDidPresent: EventName<CustomEvent<void>>,
    onWillDismiss: EventName<CustomEvent<void>>,
    onDidDismiss: EventName<CustomEvent<void>>
};

export const PopPopover: StencilReactComponent<PopPopoverElement, PopPopoverEvents> = /*@__PURE__*/ createComponent<PopPopoverElement, PopPopoverEvents>({
    tagName: 'pop-popover',
    elementClass: PopPopoverElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onWillPresent: 'willPresent',
        onDidPresent: 'didPresent',
        onWillDismiss: 'willDismiss',
        onDidDismiss: 'didDismiss'
    } as PopPopoverEvents,
    defineCustomElement: definePopPopover
});

type PopProgressEvents = NonNullable<unknown>;

export const PopProgress: StencilReactComponent<PopProgressElement, PopProgressEvents> = /*@__PURE__*/ createComponent<PopProgressElement, PopProgressEvents>({
    tagName: 'pop-progress',
    elementClass: PopProgressElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopProgressEvents,
    defineCustomElement: definePopProgress
});

type PopRadioEvents = {
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopRadio: StencilReactComponent<PopRadioElement, PopRadioEvents> = /*@__PURE__*/ createComponent<PopRadioElement, PopRadioEvents>({
    tagName: 'pop-radio',
    elementClass: PopRadioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopRadioEvents,
    defineCustomElement: definePopRadio
});

type PopRadioGroupEvents = { onPopChange: EventName<PopRadioGroupCustomEvent<RadioGroupChangeEventDetail>> };

export const PopRadioGroup: StencilReactComponent<PopRadioGroupElement, PopRadioGroupEvents> = /*@__PURE__*/ createComponent<PopRadioGroupElement, PopRadioGroupEvents>({
    tagName: 'pop-radio-group',
    elementClass: PopRadioGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onPopChange: 'popChange' } as PopRadioGroupEvents,
    defineCustomElement: definePopRadioGroup
});

type PopRangeEvents = {
    onPopChange: EventName<PopRangeCustomEvent<RangeChangeEventDetail>>,
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopRange: StencilReactComponent<PopRangeElement, PopRangeEvents> = /*@__PURE__*/ createComponent<PopRangeElement, PopRangeEvents>({
    tagName: 'pop-range',
    elementClass: PopRangeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopChange: 'popChange',
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopRangeEvents,
    defineCustomElement: definePopRange
});

type PopSelectEvents = {
    onDidPresent: EventName<CustomEvent<void>>,
    onDidDismiss: EventName<CustomEvent<void>>,
    onPopChange: EventName<PopSelectCustomEvent<SelectChangeEventDetail>>,
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopSelect: StencilReactComponent<PopSelectElement, PopSelectEvents> = /*@__PURE__*/ createComponent<PopSelectElement, PopSelectEvents>({
    tagName: 'pop-select',
    elementClass: PopSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDidPresent: 'didPresent',
        onDidDismiss: 'didDismiss',
        onPopChange: 'popChange',
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopSelectEvents,
    defineCustomElement: definePopSelect
});

type PopSelectOptionEvents = NonNullable<unknown>;

export const PopSelectOption: StencilReactComponent<PopSelectOptionElement, PopSelectOptionEvents> = /*@__PURE__*/ createComponent<PopSelectOptionElement, PopSelectOptionEvents>({
    tagName: 'pop-select-option',
    elementClass: PopSelectOptionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopSelectOptionEvents,
    defineCustomElement: definePopSelectOption
});

type PopSwapEvents = { onPopSwap: EventName<PopSwapCustomEvent<SwapChangeEventDetail>> };

export const PopSwap: StencilReactComponent<PopSwapElement, PopSwapEvents> = /*@__PURE__*/ createComponent<PopSwapElement, PopSwapEvents>({
    tagName: 'pop-swap',
    elementClass: PopSwapElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onPopSwap: 'popSwap' } as PopSwapEvents,
    defineCustomElement: definePopSwap
});

type PopTextareaEvents = {
    onPopChange: EventName<PopTextareaCustomEvent<TextareaChangeEventDetail>>,
    onPopInput: EventName<PopTextareaCustomEvent<TextareaInputEventDetail>>,
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopTextarea: StencilReactComponent<PopTextareaElement, PopTextareaEvents> = /*@__PURE__*/ createComponent<PopTextareaElement, PopTextareaEvents>({
    tagName: 'pop-textarea',
    elementClass: PopTextareaElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopChange: 'popChange',
        onPopInput: 'popInput',
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopTextareaEvents,
    defineCustomElement: definePopTextarea
});

type PopToggleEvents = {
    onPopChange: EventName<PopToggleCustomEvent<ToggleChangeEventDetail>>,
    onPopFocus: EventName<CustomEvent<void>>,
    onPopBlur: EventName<CustomEvent<void>>
};

export const PopToggle: StencilReactComponent<PopToggleElement, PopToggleEvents> = /*@__PURE__*/ createComponent<PopToggleElement, PopToggleEvents>({
    tagName: 'pop-toggle',
    elementClass: PopToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPopChange: 'popChange',
        onPopFocus: 'popFocus',
        onPopBlur: 'popBlur'
    } as PopToggleEvents,
    defineCustomElement: definePopToggle
});

type PopTooltipEvents = NonNullable<unknown>;

export const PopTooltip: StencilReactComponent<PopTooltipElement, PopTooltipEvents> = /*@__PURE__*/ createComponent<PopTooltipElement, PopTooltipEvents>({
    tagName: 'pop-tooltip',
    elementClass: PopTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PopTooltipEvents,
    defineCustomElement: definePopTooltip
});
